PROMPT:

The following is a transcription of a video for web developers called 'Streamline your repo workflow with Github CLI'. Write a detailed summary of the video, providing an account of the steps taken and topics covered. Include any names that would be useful for a keyword search: names of tools, specific commands or messages, etc. Use the first person point of view, using 'I' instead of referring to the speaker as 'the host' or 'the speaker'.

---
TRANSCRIPTION:

kind of gives you the list of the PRs that affect you. So it will show you the current branches PR that you're on. It will show you all PRs created by you, and it will show you any that are requesting a code review from you. I've only recently been incorporating this one in my workflow, but I have found it to be quite helpful and I'm starting to use it more and more. I don't typically just kind of run it over and over to see if there's anything waiting for me. My kind of workflow is that I have the GitHub app on my phone, and when I get a notification, I can just glance at it real quick. And instead of picking up my phone and looking at it at all, I just know that it's likely to be a PR and I can just tab over to the terminal, run that command real quick and see if there's anything waiting for me. The next thing I want to show with pull requests is how the CLI tool can be useful for workflows, like your tests, you know, Linton test or any continuous integration actions that you're running. So here I'm making a commit that's purposely going to fail our tests and creating a PR for that real quick, just to fire off that continuous integration. And I just kind of showcase here that you can also add a body real quick, and you can switch the CLI to use the editor of your choice. It starts off with nano, but you can use vim or emacs or whatever you like. But what happens when I submit this PR, which is still awesome and super fast, if I go to list it, if I list it too fast, it's not going to actually update with the workflows because it hasn't finished starting all that up just yet. So if you wait a moment, though, you can use gh PR views, the one that I normally use, and you can see that it says checks pending, you can also list out your workflows, but I haven't really found that to be super useful for me. Maybe y'all will find something cool. But I usually just stick to gh PR view. And where this is useful is mostly just multitasking. Like I can just fire that up. And I can be like, okay, the checks are pending. Let me go and do some additional work or whatever I was doing in another tab. And then I can come back and I can just check that real quick. And I'm like, Oh, no, all my checks are failing. And you can also see here if we use gh PR status, it will show our failing checks for branches that we might not even be on just any PR that we've created. So if you end up moving over to a new branch and working, that's a great command just to see like, oh, shoot, my other branch that I just created, it's failing. Gosh, darn it. Of course, once you fix that locally and push it up, all of your workflows will run again. And you could just use the gh PR view command again. And this time you should see that all of your workflow checks are passing. And as I mentioned previously, if you try to merge something that the status checks to workflow checks are not passing, well, then it will just not allow you to. So it of course does obey the rules of your repo. Another really handy set of commands from the CLI for me personally are the gist commands. This just actually makes just a lot more useful to me, because I can just create them on the fly. In this case, I'm just kind of showing that I can point it to a file that I just want to upload because I'm like, oh, this is a good example of how to do a thing that I'll probably forget how to do in the near future. And just with this command, you can hurry up and create a gist. You can also use gh gist list to list out all of your gists, gist list. And then that allows you to run the gh gist view command with an ID of the gist. There might be a more handy way to do it, but that's just usually how I do it. Now it will print that gist out into your terminal. So you can do some fun stuff from there, like pipe it into some sort of syntax highlighter. In this case, I'm just using NPX because I don't have it locally installed just to show the power of it that you can do just on the fly. But what it's really handy for for me is actually sending it into a file. Now this is of course on Nix based systems. You'd have to figure out how to do it on Windows, but I can just, you know, since it's downloading that and printing it out into the terminal, I can just send it into a file. And the only problem that I have with that is that it also kind of prints the description into the file. So I just have to go in and delete that description real quick. Another handy way to do this is the gist clone command. And the one thing that I don't like about this command is that it makes you create a directory, which is just kind of weird. I usually don't want that. I just want to put all the files in one thing, but I haven't figured out how to do that yet. But it's still really nice. It doesn't have that previous problem of, you know, inputting the description into the file. And if you have, you know, multiple files that you want to dump in just one relegated area, well, it works pretty well. You can of course pick the flavor that you like. Now I'm going to round this video off with a command that is actually not that practical, not one that I use very often, but it shows some of the power if you're kind of an automation nut or you are putting together some programs that are using the GitHub CLI under the hood. So you can use the gh search repos command and you can pass it tags or names or anything like that, that you want to do to search for certain types of repos. Now, in this case, I'm showing there's this AWS shell repo that I found at the top of the list here. Now that's a pretty simple command. It's not that useful. In general, you can use a repo view to take a look at that repo and it will show you the readme, which sometimes is really nice. If you're just looking for a command real quick, I could see some practical use for that. But what's really cool is that you can actually take the output and turn it into JSON and you can use a comma separated list to pick the properties that you want to put in JSON. So in this case, I want to know the watchers. I want to know the created at date. I want to know the updated at date, et cetera. And maybe I'm going to do some sorting or something like that. Again, not something I'm trying to pass off as super practical that you're going to use. I just think it's pretty cool to see that there is a lot of power and probably some really neat things that you can do with this command line. That's all I've got for you today. Hopefully this has interested you in taking a further look at the GitHub CLI and seeing if it's useful in your workflow. Maybe it is, maybe it's not. Go ahead and tell me in the comments if you've got any cool little tips that you like to use it for. But with that, thanks for watching and I hope to see you in the next one.

(END OF TRANSCRIPTION)

---

SUMMARY 1:

In this video, I discussed how to streamline repo workflow using Github CLI. I started by explaining the command gh pr status, which shows the list of PRs that affect you, such as the current branch's PR, PRs created by you, and PRs requesting a code review from you.

Next, I demonstrated how the CLI tool can be useful for workflows like tests, Linton tests, or continuous integration actions. I showed an example of creating a PR that would purposely fail our tests and how to use gh PR view to check the status of the workflows.

I also covered the gist commands in Github CLI, which allow you to create, list, and view gists easily. I showed how to use gh gist list, gh gist view, and gh gist clone to manage gists efficiently.

Lastly, I introduced the gh search repos command, which allows you to search for specific repos by tags or names. Additionally, you can output the results in JSON format and select specific properties to include in the output.

In conclusion, the Github CLI offers various powerful commands and features to streamline your repo workflow, making it a valuable tool for web developers.