[{"text": "Yes If that simple answer is not sufficient for you if you still have a burning desire within you to understand the why that you need to commit these lock files then let us go on a little quest so the NPM package lock JSON docs if you go to them It'll actually tell you here you could skip this first paragraph And it says this file is intended to be committed into source repositories and serves various purposes So you know skimming over this obviously you can go and and read the docs if you like But what it's going to get to is that you want this Representation of a dependency tree. That's exactly the same across different environments and Let me go over to the yarn lock docs real quick, which I also have open. Let's say roughly the same thing It's a little bit more Missable I should say that you need to go down to the bottom where it says check into source control and the yarn dot lock File docs and it says all yarn dot lock files should be checked into source control This allows yarn to install the same exact dependency tree across all machines Whether it be your co-workers laptop or a CI server So at the top it also does a brief little introduction Saying that you know in order to get consistent installs across machines Yarn needs more information than the dependencies you configured in your package JSON Yarn needs to store exactly which versions of each dependency were installed So I like the explanation that the yarn docs give though They you know, they both give their own insights, which is pretty cool And the main point I think to bring out of this is that a package JSON many people almost treat yarn lock files as if they're You know Redundant or an extra bit that the package JSON is already doing and that's not the case While the package JSON is a set of instructions for dependencies to install It's more like a rough target. Whereas the lock file is an exact so I think to demonstrate that we should jump over to the terminal and kind of make a little demonstration project so we'll start with making a directory here and What I'll do is I'll say make dir versioning and lock files, which you can see I've already made before Just a little bit of you know pre-gaming there and what I'll do is I'll CD into versioning and lock files I'll touch and make an index.js though. I don't believe we'll use it I want to knit this project dash Y to just say yes to everything and Then what I'm gonna do is I'm gonna npm install you can type out install or just I and we'll do chalk why not since that's there and And then I am also going to do yarn which you should not do You should not usually use two package managers in one project, but I'm just doing it for demonstration purposes So hit yarn and you'll see that it even gives you this nice warning package lock JSON found Your project contains lock files generated by tools other than yarn It is advised not to mix package managers in order to avoid resolution inconsistencies, etc, etc, so Yes, don't do that Now that we've done that I believe the last thing I need to do is I'll do a git ignore And the reason for that well, let's just open up code Trusty editor here and the reason is I want to you know, ignore node modules if I can type and Here we are So in our package JSON, we can see that we have this one dependency, which is chalk at 4 1 0 Okay, so when we run just you know The install the package without any numbers or anything like that What it's going to do is it's going to grab the latest and it's automatically going to prepend this little character up arrow here And what that means is that it will not ever move above Whatever version it installs the major Version so really quickly to go over this so this is called semantic versioning this convention and it's major minor and patch now a patch means probably a bug fix or just some, you know minor little fix of some sort a minor is a new feature typically Something that does not break your code though It's just a new feature that you can opt into and a major means that is a breaking change in most situations and that it pretty much means that if you are already using the project and you want to Upgrade to the version and you might need to change some of your code based on the change that they made so let's say they made a Major feature change to a certain color within chalk, which is a logging package Well in that case, then you might need to change the way that you call that function That's why it's a breaking change if you were to upgrade to it'll actually break your code if you don't make the change Hopefully that was a succinct enough explanation. We might get into semantic versioning in another video, but that's the gist of it Okay. Now if you were to leave this arrow off, it's going to say I want exactly this version Don't ever give me any other version. So now that we know how all that works. Let's jump over to the lock files So the lock files here what we want to look at will start with package lock JSON You can see there's all these other dependencies even though in our package JSON We just have this one and that's because this chalk Package has a bunch of other things that it needs to install In order for it to run it's using these other packages So you can see it requires ANSI styles and support color. And so there's ANSI styles and you know if we were to find Let's say we want to find supports color. You can see that has that uses has flag and etc, etc You know, it's just a chain a dependency tree. That's why it's called that so looking at chalk, you can see that the version installed is 410 and that is what we chose it to install but Let's take a look at the yarn lock file and see how that differs So the yarn lock file it's a little bit different format, but it's giving you a lot of the same information The major obvious difference right up front is that it has this Version appended to the actual package and then it has a thing called version. Let me show you what that actually means So if you were to say change this to 4 0 0 so that's our target now And I were to run yarn and I'll also run npm i There's a few things that we need to talk about here So the first thing is that you can see it still says 4 1 0 and if we go to the yarn lock It now says 4 0 0 and 4 1 0. Why is that? That's because this is this first one is saying what your you know, target version is and You know, that's why it has the caret there and that we want, you know No more than four but any minor or patch version can be upgraded, you know, whatever new ones out So anytime we run yarn that will that's what will happen. The version itself is telling you the exact version that's installed so This is the major difference here That you know it if we were just to look at the package JSON file and we can see that we have 4 0 0 Selected but that's not actually what we have installed as you can see here and in the package lock We have 4 1 0 so you might think if you didn't know this a little better That 4 0 0 is what we have installed since that's the instruction so let's say that Hypothetically, let's let's bump this to you know, three let's say and I'm going to just like delete these real quick So I'll delete those and we're gonna install three so yarn PMI We come back here. And if we look at the lock file, we'll see that three is installed And if we go to this lock file, we'll see that three and three are installed. That's interesting, right? It just happened to line up now Imagine in this hypothetical world. Let me go back here that I have a project and I'm using this dependency chalk and I'm on version 300 now if I did not Commit and push up my lock file what could happen is another person Using my project that pulls the project down fresh and runs install with whether it's npm or yarn doesn't matter they Might get a different version. Let's say that maybe an hour or two later or a day later Someone's pulling this down and since then the people who work on the chalk project have pushed up a new version They've got 3 1 0 out. Okay. Well, that's a minor and that should be okay, and we're not gonna move past the major So we might be fine, but a bug could have slipped in there or some sort of behavior That's a little bit different might you know cascade into a problem and what's tricky about this is that? Even though we have this, you know baseline set of instructions that we want to start with 300 I now locally have 300 and you let's say that you're using my project have 3 1 0 And so the problem there is that if you have a bug You might say hey, I run your project and I have this issue and I'll say well that doesn't exist on mine And now we don't know what it is We don't know if it's someone else's code a third-party code or if it's our code that we wrote and that's that's really the problem that the lock file is trying to solve\n\nSo with the lock file if you've committed this and pushed this up It is not going to install later than this version that you see here regardless of what the target is Whatever whoever's lock file is there is what's going to take precedent So, you know, even if chalk 3 3 0 is out or 3 3 5 or whatever It's not going to move past 3 0 0 it's going to use that one And so that ensures consistency between all our servers and it's not just for between developers It's also for as they mentioned like CI continuous integration or on a server or deployment or something like that We want consistency between all of these so that we know we're all running the same code base as much as we can anyways So I think to round this video off One thing that you know Why don't people commit a lock file and I want to at least show something for that. Well, what commonly happens is that You have an issue Let's say in your node modules or you have some sort of conflict and people are just you know Tired of dealing with the issue and so they they delete node modules Or they think the only recourse is to delete the lock files now deleting node modules There's actually, you know, pretty normal in a lot of situations. You shouldn't have to do it too often But every now and then it's fine because you can just delete the lock file You can just reinstall them and if you've got the lock file it'll install the same ones but if you delete the lock file, you're essentially starting from scratch there and You know everyone else who pulls down your version is gonna have a whole new set of things to install It might be a problem it and it might not be a problem, but it does interfere with inconsistency or does interfere with consistency So let's create a weird hypothetical just to show how to deal with that situation Okay, you know, I can't cover them all but hopefully I'll cover a major one here So what we need to do here is we first need to add all our files since we're not picky at this point And then we're going to commit let's just make this the initial commit and Then what I want to do is I want to get checkout dash B I have this v4 bump that I want to do, you know We'll just say that we're we're bumping up the version 4 for whatever reason Bear with me now on this branch. What I'm gonna do is I'm just gonna change the target to 4 okay, and maybe actually I'll make it like exactly 4 for whatever reason, you know That person is that important here? And then so what I'll do is I'll run yarn and I'll run npm install. Okay, and You know, let's look at what happened here and you can see that because we changed what the package JSON target is We were able to change the lock file at that point, you know, don't be too surprised by that And the same thing here And so now what I'm gonna do is I'm going to commit this time I'll do it through VS code because why not all each of these files you can see we change the lock file here We changed this lock file and then we change the package JSON Now a quick note here. The yarn lock is not meant to it's it says or all lock files It's this is an auto-generated file do not edit this directly. So, you know, let let the package installers deal with that So we'll say bump to v4 Perfect and now what I want to do is I want to go back to master And I'm gonna make a new branch and this one I'm gonna say Bump To for one, you know, these these branch names are terrible, of course, but You get the point So now I'll go to my package JSON and I'll say I want this to be for one, okay Now I've chosen these because they're actually going to create different lock files here So when I run yarn and I run MPMI And I go back to my editor What I should see here in my files is if I look at the yarn lock the chalk version is set to for one this Time, okay, perfect. Same thing with this lock file shouldn't be any different. We'll go back here We'll add all our files. I'll make another commit that says bump to for one Don't write commit messages like this in the real world, please Look at our status beautiful So now we'll go back to master and what I'm going to do is I'm going to git merge and I'll do this It doesn't really matter what order here, but I'll do I've got these two bump to for one Okay, so we'll merge bump to for one first and then now what I'm gonna do is I'm gonna you know Let's say someone else made another PR for this. I'm gonna bump. I think what did I say before? Let's see. What what branches do I have? I've already forgotten my names V4 bump nice naming conventions. So git merge v4 bump And notice we have a conflict. Okay, we have a conflict in the yarn lock We have a conflict in the package.json and we also have a conflict in the package lock json. Okay So what do you do in this situation? Well, this one might be pretty straightforward It should be but I'll go over it real quick. You've got these two versions your package json You do need to manually resolve this you need to decide which one do you want? So let's say that we want the 410. We're just happy with that one. So we'll accept current change Okay, perfect But now you still have a lock file that's in conflict and a package lock json that's in conflict And the problem here is that you're not supposed to edit these files at all And so I know that some people will just delete this and start over, you know Because they're not they're not really supposed to change it or they'll just change it manually And it'll just kind of get out of sync. But here's what you're really supposed to do Now that you have the package json file resolved you just write yarn. Oh, that is because We need to go to package json And we need to add that file What does it think? Oh, that's because I haven't saved of course So now I've saved it, right? So this is kind of cool little accident here, but it'll tell you an unexpected error occurred And then it'll tell you this arrow in json. It's not a great helpful error I wonder if I can actually go back Let's go back to this conflict real quick just so you can see now if I were to run npm install You actually get a lot more nice error in my opinion from npm So it'll say please resolve the package json conflict and try again So let's go back to that We'll save and now we'll run them so npm i And notice it said a git conflict was detected in package lock json attempting to auto resolve Beautiful and then I'll run yarn and the same thing will happen merge conflict is detected And the same thing will happen merge conflict detected in yarn lock and successfully merged Perfect. So now if we look at these files, we do not have a conflict anymore So now we can just add all of them. We can ignore this error log that I generated discard that Okay, so that's how you should resolve that type of conflict Obviously, there are other ones that arise that you know Would make this video very lengthy to try to come up with all the situations So i'll leave it at that just know that you are supposed to in the end commit your lock files up You should try not to delete them unless the most extreme emergency And you're just pulling your hair out and you can't find any other way But if you're working on the team of developers, please let everyone know and consult with them first Because you might cause more problems than you solve in the long run If you made it to the end of this video Hopefully you walk away with a better understanding of semantic versioning As well as why you should commit your lock files up to your version control And if I happen to miss anything or didn't cover anything as much detail As you would have liked just leave a comment. Thanks everyone!", "title": "Should you commit Javascript package lockfiles?", "url": "https://www.youtube.com/watch?v=i-AuSqlRRpQ"}]