[{"text": "Hey everyone, welcome to Swashbuckling with Code. I'm Jimmy Cleveland, and today we're going to be setting up Next.js' preview mode using Contentful's preview API. Now I know this video might seem a little bit long to some of you for setting up a preview mode, and that's fine. There are already examples like the Next.js documentation and some other things to just quickly figure it out yourself if you wish for that, but I'm really trying to go step by step through this and walk you through what it is, how it works, and kind of explain some troubles I've had with other systems and stuff like that along the way. I personally think that's really valuable and it's stuff that I would want to know, so that's why I'm taking the time to make this video. But I want to be considerate of your time, so I'm also going to have timestamps if you want to jump around to specific things that you might need. And I'll also have the repo hosted, which I'll have a link to in the description for the code at the end of it if you just want to glance at how my config is and figure it out yourself. So before we get into the code, let me give you a brief little summary of why something like this even exists, this preview mode. One challenge that I and many others have faced when working with statically generated content is that preview can be a little bit more challenging. Many traditional CMSs, like WordPress and such, have their own preview mode built in. But when you're using a headless CMS or a headless pattern, like if you're using a headless WordPress, and then you're doing statically generated content, that actually becomes a little bit more difficult of a challenge to give them a responsive preview mode. So each build system, such as Gatsby, has invented their own way to alleviate these pains through some really awesome engineering things to kind of speed up the process and make it more fluid. But today I'm going to go over Next.js because I believe that they have one of the most elegant solutions, if not the most elegant solution, for this that I think is very simple and very effective. Hopefully by the end of this, you'll have a pretty good mental model of how that all works, all the problems and the solves in general, and how Next.js preview works so that you can customize your own project to your particular needs. Okay, picking up where we left off last time, if you haven't watched those videos, they're going to be in the description and in the playlist here. It's the whole Contentful plus Next.js playlist that I'm doing right now. But for a quick recap, or for those who don't want to go back and watch that and just want to see preview in action here, what we've got here is we have Contentful being hit, which I'll go to that Contentful space later when we need it. But for now, we are getting a very simple model with a few fields. We're hitting that client, and we are using getStaticPaths to generate out all the different routes for every single slug that we find for a product review, and then getStaticProps here to generate out each individual page by fetching that one by ID or slug or whatever you want to call it. So now let's get into the preview functionality. And to start there, we want to understand how this API structure works really briefly. So there's this folder that it starts with whenever you make a Next.js project. It's this API folder, and they start out with this hello. So let's see how that behaves. You can see in the syntax here, it might look a little bit Express-like to you, and that is what Next.js also refers to it as. They have an API. It's not a one-to-one, but it is very similar to Express with this rec and res, request and response objects. So you can do res.status, set a 200 status, return some JSON. Let's see that in action real quick. So coming back over to here, I'm going to start up my server. I'm now on a preview branch. That's the branch we'll be on in the repo if you want to follow along or just compare your code or whatever if you have issues. So when we do that, we'll go back to the browser, and we'll hit this route here, and you can see it loading fine. But let's go to slash API slash hello, and then we get this response here, right? So that's pretty simple. So in order to initiate preview mode, you can go to the docs here. I'll link this in the description, but you could just search Next.js preview in Google or wherever, and they have some really nice documentation that kind of walks you through setting it up. I'm going to distill a little bit of this. They have some really good examples here for each database, but I found them to be pretty involved. When you're kind of first starting, there's a lot of like abstraction and stuff like that, which is good pattern wise, but might be a little difficult to just get right into it. So that's what I'm going to kind of do is keep it simple. But walking down here, you'll see that they recommend making a sort of route that has this code right here. Okay, so that's what we're going to do. Essentially, we're going to come back to our code, we're going to make a new file, and anything you make in this API one is going to use this format. It's going to use this little express-like server. It's pretty cool. We're going to name it preview.js. And so whatever you export here needs to be the default export. It's a common thing to call the function a handler. You could call it whatever you like. And then here, you're going to get a rec and a res back. Call those whatever you like as well. And let's just start by console logging that out when we hit that route. Let's just do response. Okay, we'll go back to our browser. Hit here and instead of slash hello, we'll do slash preview. And it's going to hang because we didn't end the response at all. But that should be enough to at least go to our server and see this giant thing dumped out. Okay, I'm not gonna scroll all the way through that and put you through that misery. But API resolved without sending a response to API preview. So they give you a little hint there, you kind of need to resolve that somehow. And in particular here, conveniently, right at the bottom, there's this set preview data that's on the response thing and among some other things. You can see dot end, which we're going to use as well. So let's do that. All we need to do here is do res dot set preview data. And that takes an object and a lot of the times you'll just leave this empty. This is just to flag on preview mode with a cookie that I'll show you. But you could do something like my key, my Val, you know, pass a key value and I'll show you where you get that later. For now, we'll just do res dot end. Go over to the browser, re hit this preview. And you'll notice that why did it did actually hit it? Or did my refresh not work? I don't think it worked. We'll do slash preview, press enter. And there you go, we should get this white screen because we ended it. But notice that we have this cookie over here and it's there's a lot of zoom going on here. So it might be hard to see. But in particular, what's interesting is this next preview data is going to pop up here and it's this hash. So you know, for security reasons, they aren't putting anything on there. But this cookie is something that is going to be unique every time that the server runs, which is pretty cool. And so that will start over every single time. So it'll have to be reflagged. But what that does is it's going to make it to where when we go to, let's say, product product one, we'll still have this cookie on our machine here. And we will until we essentially restart the server in this case. Or if it were production, you know, we'd have to clear it ourselves or whatever when it expires. Let's go back to our code real quick and see something interesting. If we go into this slug where we're processing all of our products in particular, and we have some methods running, if we were to log out this context object, let's see what we get. So we'll do console dot log. And we'll just do, let's see, context. I don't know why I bothered to type that up. Okay, so we'll hit this again real quick to get that log triggered. And then we come back down here. And you'll see we get this context when we hit and notice that it says preview true preview data, my key, my val. So this is how you would get those properties that you want to send yourself. And you could do anything with those you want. There's lots of options there. We won't need it for the rest of this video. So I'm going to kill it in a", "title": "Next.js + Contentful Preview Mode setup walkthrough", "url": "https://www.youtube.com/watch?v=HNDpkYJEjw4"}, {"text": "video. So I'm going to kill it in a moment. But just so you know, if you want to kind of like send some data along and react to that, that's a cool way to do that for preview mode only. So we really care that the preview mode is true. First of all, that's one thing that we want to react to. Now I want to show you something interesting that happens here. There's some pretty cool stuff that's happening that might not be obvious at first. If we do npm run build, sorry, that'll build real quick here. And then we'll do npm start. So we're using like an actual production build here. What we want to see is anytime we hit this, I'm going to refresh this page. And we come back into here, you'll notice that no nothing was logged here like that the server wasn't hit. There isn't that log of the context object that we just saw. So I'm just going to refresh it a couple times. Nothing happens. Go back to the terminal. Nothing happens. But what happens if we go to notice we didn't have our cookie anymore because we restarted the server. So if I go to API slash preview, I'm now going to get that cookie. Okay. And when I go back to product now, let's see if it does it again. When I reload, you'll see that this context was logged out this time. That's kind of interesting, huh? It might be particularly interesting, particularly can't speak, because this get static props is not it's supposed to be static. It's not supposed to run. You know, it's not get server side props. So it's like, okay, well, how's it doing that? Well, what's cool about next JS is they've realized a pretty simple solution to this whole preview problem is that when you are trying to make drafts in your content editor, you're not like the end client, you know, the user, the typical person that's going to be using your website, you're the person like editing it. And so you don't need to do a full rebuild of all the pages every single time and, and try to go through the problems. If you've ever experienced a static site generation and preview mode, you probably know what I'm talking about. But if not, just trust me, it can be a real pain if you're just trying to do the whole build over and over again. What they're opting to do is say, you know what, let's kind of switch back over to a server side sort of behavior. And let's do things on request whenever we see the preview flag sent, because this particular person one probably already has the site, you know, cache to some degree, because they're hitting it. But two, they don't really need the super duper efficiency of statically generated stuff. You know, server side is going to be good enough for them. For this purposes, this actually ends up being a really elegant solution. I like it a lot. It's cool that they've made this single function, you don't have to do something special with it, it just kind of opts in or opts out of rerunning every single time. And that's going to be crucial for us to be able to, you know, get things on demand as we're doing a preview mode. Okay, so hopefully that rant made a little bit of sense to you. But if not, I apologize. Hopefully it was useful. So we'll come back to preview here. And the next thing we're going to do, we do not need these values, we just need the empty object here. And we want to start getting some params off of this query request. So if we didn't need rec, we could just do an underscore there, but we are going to use it. It's just a common thing, just so you know, if you're not using like the first argument of a function. We're going to do, we're going to pull product ID, that's what I'm going to name it when I pass it in, off of rec.query. Okay. So now, let's see what that is by console logging, product ID, product ID. So now if I just go here and I hit, I'm going to hit that same endpoint, API slash preview again. You know, I didn't pass anything in, so we should see an undefined for that. Hmm. What happened there? API preview ended fresh. Oh, silly me. What am I doing? I need to rebuild. I'm in production mode. It's not updating to my changes. I'm very sorry about that. System run dev, restart that over. I just had it in production because I wanted to show you the actual, you know, preview in production setup. So let's re-hit this route here. Go back to here. And there we go. So we've got this product ID, product one, and that's working great. So you can see now we can pull some params off and start doing some stuff with that. So the next thing we'll do is we'll head over to the Contentful space and we'll get the preview access token and start to set up like preview and all that. So for now, we'll only need the access token. So over here in my Contentful space, what you can do is you can go to settings if you're following along or doing your own thing. You can go to, we will do content preview in a moment, but for now we need API keys. So there's this next JS key thing here. And don't worry about any secrets. I am going to regenerate them. So normally I don't show people this stuff, but we already have the space and the content delivery. Now we're going to want this content preview access token. So I'm going to copy that. We'll go back over to our code and in our.env.local here, we're going to make a Contentful preview access token. You can name it whatever you really want here. I'll paste that token here. Why we specifically need this token as this is how we're going to get Contentful and many, you know, other CMSs that I've worked with have this idea of a preview mode where they have a different API that you hit for like draft content. And that's what we're meaning to get here. So in order to do that, if we go back over to our slug page, you'll notice that we have this like Contentful.createClient or whatever. And we're doing this access token and this process.env is using, or it's pulling off Contentful access token right now. We're going to pull off the preview token to do that. By that I mean, you know, getting preview data, getting draft data. So what will happen first though, it's going to make sense at this point. We were going to do it earlier in one of the previous videos, but it was a little bit too early now. It kind of makes sense to move this to somewhere else. So I'm going to abstract this code to a sort of like utils folder or something like that. And that's because we're going to need two different clients. I'll make a utils. I've got too many things going on in my brain, sorry. And then in this utils folder, we'll just do a Contentful.js file. Okay. So for now, just to get things working, we will cut, actually we'll do both of those. We will also want the import. We'll move that over to here. And oh, I did folder. Whoops. Lots of mistakes. So we'll do Contentful.js, a file, not a folder. And now we have this client, which we want to export. I don't know why it's a var. Let's see. So we'll do export const client. Okay. Back here, we're going to import that now. And then say client and Contentful. And actually, rather than do it that way, I'm going to do star as Contentful. So I have the whole thing. And then down here, we would change this wherever we use client, we would change this to Contentful.client. You'll see why I'm doing that in a moment. Okay. So it's just these two spots, get static paths, Contentful.client, and get static props, Contentful.client. Okay. So back over to here. Why we've done this is because we really don't want to be creating these clients over and over and over again. Okay. I probably should have left that. But when we go to, when we want to use preview, sometimes we're going to want to use regular data and sometimes we're going to want to use preview data. But the problem with this is when we instantiate this client, we have to give it the right access token and the host URL and all that stuff to use the correct API, right? But if we want to switch back and forth between the two, what, you know, if you're a little more naive, we might do is, you know, do some sort of like conditional here where we're like, hey, is it preview mode? Because we saw we could get that off of context. Hey, if you are preview mode, you know, use this client, otherwise make this other client. But the problem is, any time every little page runs, it's going to be recreating these clients instead of using more of a singleton pattern where you just make them one time and then import them. So now we're going to export const", "title": "Next.js + Contentful Preview Mode setup walkthrough", "url": "https://www.youtube.com/watch?v=HNDpkYJEjw4"}, {"text": "import them. So now we're going to export const preview here. Let's actually call it preview client. And then I'll do Contentful dot create client, same thing, but I'm going to pass some different stuff here now. So pretty much the same thing for these two. I could have just copied this whole thing, couldn't I? And for Contentful access token, we'll say preview access token. All right. And the last thing we have to do is you have to specify a host, which is optional. They'll default to cdn.contentful.com. That's what's being done up here. But in this one, we're going to do preview.contentful.com. So now that we're exporting these two different clients, they're just like pre-made the first time that this file is imported, and then we reuse that over and over again. We imported it as Contentful, so I could access either one there. We can keep this await Contentful dot client because in get static pass, we're always going to get, you know, we can just hit the main API for that. I guess you might want to switch this to be able to do preview or non depending on if you had like brand new URLs that didn't exist yet or brand new slugs. But for now, we'll keep this. We'll just generate all of them based on the production URLs. And we'll do the switch here. So in get static props, we have this await Contentful client. Actually, I didn't want to do that because what I'm going to do is we'll keep this like client pattern, and then we'll say const client equals, and this is where we can say, hey, context dot preview. Remember, that was a true false Boolean. So we'll say if that's true, use Contentful dot preview client. Otherwise, use Contentful dot client. I'm going to format this. I don't know why it's not formatting for me. There are, you know, a multitude of ways that you could handle this. But I think this makes some sense. So now when we hit this route, it's essentially going to, you know, on production, it's going to first build them with this Contentful dot client, the regular mode, the production mode, whatever you want to call it, as it generates out all the pages. But then when someone comes here with that special preview cookie, we're going to switch to the preview client. And then everything else will be business as usual. Pretty nice, huh? So let's see that in action. What we'll do is we'll go back to our Contentful, go to content, and let's go to product one here. Now product one has the very first product. If I were to type draft stuff here in the heading, you'll notice it's saving, if you saw that. I'm not going to publish, though. I'm going to leave it just changed for now. And if I go back to my server, let's go to just product, product one again, and we should see draft stuff, right? Okay, so that's because we have these cookies. So let's clear those cookies real quick. And let's refresh. See, it went away. So that's how it's going to work. So it's just we, we, anytime we hit this, or the first time that we build all of our regular users, if we're in production, they're going to see this code. No one's ever going to see the draft stuff, unless they know how to activate this special little preview token cookie thing. So let's flip that back on again, just to see that. Go back to preview. And we really don't have to pass a slug. We could just hit whatever, because we'll get the tokens. We haven't set up that measure yet. And then if we go back to the page, beautiful. So we'll do redirecting and all that stuff next. So now let's set it up so that when we hit our preview, whatever slug parameter we pass there, it's going to redirect to this page. So it's essentially what we're acting as is sort of a link that you could give someone that will give them a special parameter that's like, hey, activate preview mode and add a cookie to their browser, and then redirect them to the page that they were kind of trying to go already. And that's going to be especially useful and contentful when we add preview links to each page. So when we come back here, we'll go back to this preview. And instead of res.end, I'm going to use res.redirect. Some of you might be scared right now. Let me actually show you why. If you go over to the documentation here, let's see, they did that. That's cool. Preview mode enabled. There should be a point here. They have this like kind of full example we're going to come close to as we step through it. But right here, you'll notice there's this res.redirect. Notice that they particularly say we don't redirect to rec.query slug as that might lead to open redirect vulnerabilities. So a lot of times you want to be really cautious with how you use res.redirect. And let me just give you a real quick example of why. So let's say that I redirect and I'm like, hey, you know what, just redirect them to product ID. So let's say, hey, if they type in their query params or whatever, we're going to send them all along onto the product ID. So if they type product one, then we'll send them to product one or whatever. Pretend that that's how our URL structure worked. Okay, it's just like everything's slash at the root. Now what could happen here is now that that's working, I'll go back to API preview. We'll do product ID equals. So if I go to product one, that's going to take me to, you know, API product one. And if I did slash, it would take me to slash product one or whatever. Okay. But let's, let's go back here and do API slash. And then maybe let's do something like preview and then product ID equals HTTPS colon slash slash Google.com. All right. Let's type two letters there. And if I hit enter here, it's actually going to full on redirect me to Google.com because we just said redirect to whatever they type in there. And that's really bad. That's a really dangerous vulnerability to have because what would happen there is if someone else could, you know, give someone a link to your site, let's say that you were a bank or a PayPal or something like that, you're using some sort of service. You could fully redirect them with a query parameter to your site that looked just like the other site. You could imitate it and you could like get them to type in their credit card data. And that's pretty scary. Among a bunch of other attacks that could happen. Right? So that's why the caution there. Okay. So, you know, you just got to be careful with, with, with how you do redirect here. So what people will do commonly is some of the examples show like right head here. And so you would do like right head with a 307. So it's temporary and not permanent. So we tell the, you know, SEO crawlers not to change their links and all that stuff. But what we're trying to do here is you could just say like set location. Let me actually type it out just so you know. And then we would be like, okay, let's set it to slash product. So go away. And then like product ID. So you could do something like this, which is a, you know, a pretty common solve here. In this case, I guess we wouldn't really even need it. But let's say that you wanted to send them here. You could just use right head as one alternative. I've seen some people recommend to do that, but we're going to stick with the res dot redirect because I am not too worried about that just because I'm not going to be ever just sending them directly here. You'll notice in the next JS docs that we referred to, they did like post dot slug. So they have like a qualified link. We'll kind of get into why that can matter in a moment. But what I can do here is I can do the same thing. It's a product slash product ID that I did before. And so the thing about this is, if you ever try to like do the whole thing that we did before, I know I'm taking a little bit of time here. It's just a pretty valuable thing to kind of have in your head. You know, feel free to skip forward in the timeline. If you're not interested in this, I should have said it beforehand, but it's pretty useful thing to know. So if you go to preview, we're about done here. And then we were to do product ID. And I did the same thing where I did that like product ID equals HTTPS colon slash slash google.com. And I hit that. Notice it's going to take me to slash product. So it won't actually work if someone tries to spoof a URL here, because I've hard set it to go to that product here. So because we have that URL structure first, I'm not as worried about that. But you know, just so you know, be cautious, do your own research and all", "title": "Next.js + Contentful Preview Mode setup walkthrough", "url": "https://www.youtube.com/watch?v=HNDpkYJEjw4"}, {"text": "be cautious, do your own research and all that. All right, cool. So now let's actually do it for real. API preview, and we'll do the product ID is equal to product one, we hit that, and it will redirect us here. Pretty cool, huh? So if we were to clear that, we were to go there, we have a regular production mode. And then we go back to this route right here. And we hit it again. See, it's like seamless, it just kind of redirects us right here. And it sets our cookie and we get the draft mode stuff. I think you get it. So let's move on to setting this up in Contemple. So in Contemple here, we can come over and what we want to do is go to settings. And you do content preview. And mine's a little bit zoomed in here, just so you can see better. But you should see this kind of like blank set up a content preview page if you haven't ever done it before. You click it. And then here, you set a name, I happen to have next JS preview as a name. Cool, that works. I don't think you need a description. And then here, the content preview URLs, you get to pick for every like content model what you want the link to be, like if you want to turn them on and how you want them to go there. And this is pretty neat if you want to do like some crazy component stuff where you're previewing like just a certain type of component, and not like a whole page. But for now, we're just previewing the whole page. So if we go to product review now, notice they give you this cool example, right here, your website.com such product product review, entry field slug. Okay, so the part that we really care about here is this entry field slug thing going on. And looks, I've already got it from when I was messing around with it. Okay, I guess I'll just use that for now. So we want to type HTTP. For our case, we're using localhost 3000. A note on that in a moment, then we'll do slash API, like we did before preview, and then set a slug here, we want to do we want to do product ID equals. And then this entry, this is a contemptful specific thing, entry field product ID, let me show you what would happen if you were to put like slug or whatever they started out with, it should give you a warning that tells you that ID doesn't exist on this content type, which is really cool of them. So we'll say, yeah, we want to use product ID. And we want to save that. Perfect. Now, the note about localhost 3000, is that I'm using this for preview mode, you know, just to kind of like demo it and showcase it, because it's going to be faster to show it this way. But commonly, how I would do this is I would actually set this to the production URL, or possibly a separate server that specifically serves for preview purposes, if you want to do that, you know, maybe you've got a really big enterprise setup going on, but a production URL actually will work just fine. Wherever our site is hosted, we could point to that with HTTPS, please. With that, we can go to the production site. And the cool thing about that is that it's going to be reflective, I love this about Next.js and how they implemented preview, it's going to be reflective of the real data, the actual production data. So someone who's a content editor, and you're in here, whether it's you or other people, maybe on your team, or whatever, you know, I don't know your purposes for what you're using this for. But anyone who's using this as a content editor can see their preview data with the actual like production hosted site. So they have pretty good assurances that it's going to work or what it's going to look like. I just think that's a really cool, elegant solution. I've played around with I've had a lot of fighting with, for example, Gatsby Cloud, though it has improved quite a bit originally, you know, trying to redo these builds every single time that it previews and the delays, and they've made a lot of cool engineering improvements to make that better and better and better. But really, I just love this elegant solution with Next.js preview of like, let's just use a cookie that gets flagged that, you know, only they're going to set somehow, and that will show them the preview data and the regular users won't ever see it. You would want to add a little secret for a little bit of extra security. And we'll do that in just a moment. But let's make sure that this works. So now if we go back to content, and we go to product one, we'll see that there's this open preview button that used to be grayed out and is now here, because we just enabled it for this content type, the product review type. If I click that, it'll actually open a new tab and take me right there, which is pretty freaking sweet. So let me show that again by clearing my cookies. So we don't have preview mode on right now, right? And then we go here, and we click this, and it opens it, and it instantly went to that URL, we got redirected here to, you know, the actual product, product one, and we have draft mode on, which is pretty sweet. So now if we go back and we're a content editor, we could, I don't know, change some more stuff, draft subhead here. We do have to wait for it to save. And this is the one gotcha that I haven't figured out quite yet. I haven't spent a lot of time looking into it. You do have to reload every time that that saves. It's not a huge deal, but it'd be cool if there was like a webhook or something that would auto reload. Again, there might be a way to do that. I haven't spent a lot of time looking into it because I just haven't really needed to. But you do have to refresh. But you know, it's pretty fast. Like, let's just kind of show that in regular time. So let's, you know, delete that. Do that thing. There's a little debounce time waiter. It saves. As soon as it's saved, we refresh. And boom, it's there. Cool. So that's pretty sweet. So we'll do that. We'll get rid of, we'll get rid of this for now. I'll just leave that. And let me also show you what's cool about this is this works for every page. The way that we've set it up is really neat, because now if I go to ABC one, two threes page, and I click open preview, I can do the same thing here. It's opened this page and it's redirected to that. And now I have my preview mode set, which I already did. But if I were to add some gibberish here, and I were to wait for that to save, I'll go back over here and I'll reload. And there it is. So this is really neat. It just makes it really easy. Let's publish that and go back. I don't know why I did that. I didn't need to, but it makes it really nice and convenient for the editor to just kind of like pop over to that page. Okay. So I mentioned a secret key that you could do, and let's show that this is also recommended in the docs. But if we were to go to content preview here, let's reopen this. And here, let's add another parameter. So we have this product ID equals this, but let's make it to where they have to pass a secret as well. So we'll say secret equals, and we'll do super secret. You would want to probably create some sort of hash or something like that. Put that in here. And then we'll use the and to set another parameter, another query param. And now that we've saved that, what's going to happen is we are going to go back over to our API here, and we're going to put a little condition. So rather than making you wait for me to type it out, I'll just copy paste this over just so you can see it. So before we set preview data around here, what we want to do is we're going to make a little if statement that's like, let's check for secrets. So we're going to have to pull that off of query params, right? Secret, secret. We're going to do a secret and we're going to say, hey, if that's not equal to some sort of secret environment variable here, which we'll go make. Let's do that. And we'll say super secret, right? That's what we set it to. Go back to preview. And so we'll say, hey, if their secret that they passed in the query params, you know, if they don't have one or it doesn't equal it because this is an object, so it will be undefined otherwise, if it's not equal to this from our environment, or they didn't pass a slug at all. So if either of the params aren't there, let's give them a status 401, which is unauthorized, and then give them the message invalid", "title": "Next.js + Contentful Preview Mode setup walkthrough", "url": "https://www.youtube.com/watch?v=HNDpkYJEjw4"}, {"text": "unauthorized, and then give them the message invalid token. Let's see that in action. Oops, I better save. So let's go back here and we'll go to API slash preview. Let's just pass nothing. See that? We get an invalid token here. And let's go back to the network tab and we'll see this 401. If we hover over that, does it tell us? Yeah, unauthorized. Cool. So now if we did, oh, let's do product ID again. Nope, sorry. We have some new credentials that you need. And so what you do need is you need secret. And let's try one more. Let's do wolf instead. Nope, that's invalid because it's checked it. What about super secret? I did secrete again. What's wrong with me? Cool. Slug is not defined. Oh gosh, I'm sorry. In my last one, I was using slug, but I feel like that didn't make much sense. So I changed it to product ID. These are good little errors to see along the way though. So I'm going to leave them in just because one, you know that I can bleed, but also it's really just, you know, it's the everyday life of a developer. Why try to hide it? Right. And you get to kind of see like what happens if you don't have a slug. So let's do it again. Super secret. Hit this. Boom. Perfect. So we've got that all working. Lovely. So what we'll do just to finalize that, just to be sure, is we'll go to application. We'll clear this cookie just to make sure that we're in regular mode. And here, now that we've set this up with our super secret and all that stuff, let's go back to a content type and we'll go to our content type. And if we did this right, we shouldn't get an unauthorized when we click this. Invalid token. Ah, well, I like, I'm glad that we were really getting to see all of the layers here because I made some new mistakes. We did. I don't know why I was so obsessed with typing secret, but that's cool. So you can see it wouldn't work if we didn't do it right. We'll click this again and you know, there you go. It's like TDD, you know, let's take the unhappy path and then the happy path. Make sure that it actually breaks first. Good to have that assurance. Okay. Now as a regular user, how am I going to get out of this dang preview mode? Like we, you know, as developers might know to go to this application tab and we're going to go to this preview mode. And we're going to go to this preview mode and we're going to go to this preview mode. Like we, you know, as developers might know to go to this application tab or whatever, get rid of our cookies. But one, we don't want to have to do that all the time. And to our users, you know, we shouldn't expect them to know that. So what we're going to do is we're going to create a separate route to clear the preview data, the cookie, and then we'll make a little banner that lets you know that you're in preview mode, which will be kind of cool. And it'll also have a button to go to that route. So let's do that real fast. Go back to here. And in our API folder, let's make a new one. And let's call this like cancel preview. Maybe I guess we should probably do hyphens. And I'll just paste this here. So this is just a function handler. We aren't using rec, we are using res, we're going to call clear preview data. And then we're going to redirect them to the homepage because why not, we could like figure out what page they are and all that stuff. But let's make it simple for now. So let's quickly test that that works. We did cancel preview. And so right now we go to this, we should see our draft stuff. But if we were to go to the route API slash cancel preview, it should redirect them to the homepage, it cleared the cookie. And then if we go back, we can see that we're out of preview mode. Perfect. All right. So now I'm going to add a component here. So I'm going to since we don't really have a components, I like to make a components folder at the root, pretty common convention, do everything in the root next JS. So I'll do components here. And then let's make this like preview mode dot JSX or j, are we just doing JS, we're doing JS in this one. Doesn't really matter. And to save you time, I'm going to paste one that I've made. And I know you'd love to watch me type out all these styles. So you know, it's going to be a style thing, you'll see how it's styled. But really, it's this preview banner. Let's actually call it preview banner. I like that name better. Rename banner. So we have this preview banner, we're importing link from next link, so that we're using it properly. We have a span here that just going to tell them that it's preview mode. And in particular, this is the part we care about, we're using a link you this is important, you have to set this pre fetch false, because this is a link to an API route. It's in the documentation. If you look in the like next preview docs or anything like that, they have a little hint here. But just so you know, you want to set preview or pre fetch to false that when it's loading, and it's like pre fetching all of the single page app links that it doesn't do this one in particular, because it's not it's not an actual page, it's a route. And then I had to sable preview, but let's I called it cancel preview in this one. So let's do that. So we're we're redirecting them to this cancel preview, which will then clear their cookies and redirect them to home. And that's pretty much it. It's very simple. As far as this component is concerned, there's not a whole lot going on here. And it'll be in the repo if you want to reference it. Now next, what we want to do is we want to go to our slug page here, we're only going to show this on the on the product slug here, we essentially want to have like a prop stop preview, or something like that. So what we would do is we would go down to get static props. And you'll notice that we had this like context dot preview to determine this, which of course, you could destructure if you want to. But we'll say, hey, props, let's add a new prop called preview here to pass along and get static props. And we'll say, well, that's going to be equal to context dot preview. And so you might think that you could just do this. Unfortunately, I think this comes through as undefined. Let's just double check that. Come back here. So if we're not in preview mode, when we load this, yeah, we'll get an error because it's like error serializing dot preview return from get static props. So what that's saying, you always have to, you can't just have undefined, you can do null. But whenever you have something that's going to be undefined, you have to have another state of like, if it's undefined, we'll set it to false. Okay. I wish that they like it's a Boolean that comes in as true. So I wish they would automatically flag it as false, but whatever. So we'll say or false. So for in preview mode, set it to true, otherwise set it to false. Okay, then up here in our props, we're going to have access to that now. So let's do something like this. Let's say when you return this, you know, this is the error version. So we won't do it there. But here, we could do something like props dot preview, if that's true, and and load preview banner. I think that should be it. So we'll save that. Notice that auto imported that don't miss that. No, if it didn't do that for you, you need to import it, then we'll come over to here. Let's see if I did that. Right. So if you reload this, we shouldn't see it because we are not in preview mode. But if we were to let's actually just use our handy contentful link, we'll click that boom, boom, boom, this is what it would be for a regular content editor. Now they have preview mode enabled and it's got draft stuff. Pretty sick, huh? And then we could just click this exit preview mode, and it will clear that for them. And then of course, they would have to go back to the page, which is, you know, a minor inconvenience. But if you want to figure out how you want to redirect them properly, go ahead and do that. Okay, so we're really just about done now. I think that the last thing we want to do is add one more little security measure. I mentioned that in the docs, we were going to kind of get to some some extra little security stuff that they're", "title": "Next.js + Contentful Preview Mode setup walkthrough", "url": "https://www.youtube.com/watch?v=HNDpkYJEjw4"}, {"text": "get to some some extra little security stuff that they're kind of doing here. It's a minor thing, but it is minor for us to implement and you know, a good amount of extra security can't too much. So we have this thing right here, we're just like, hey, you know, if they don't have the correct secret key or the product ID, you know, go ahead and bounce them, otherwise set preview data. But really, what I would like to do is actually go and hit contemptful and make sure that this record exists. If someone's trying to get to the preview data of this thing, for whatever reason, let's go see if it's actually there. And let's redirect them to that product ID rather than use their query param. This will make it even safer with the rest are redirect. So as an example, we could go over to this like slug thing here. And what we essentially want to do is something like this, we would just take this like const product here we could this is from get static props in our slug, we could just take that. And we could say, hey, if they pass that first check, let's go ahead and fetch this thing. Now, we need to set our function to async. So let's do that. So that we can do that very easy. And now we can await this product. And so what we'll need to do, though, is we'll need to get client, right. So we'll import star as contemptful just to keep the same convention from and this is from our utils folder. Oh, it's just up one folder dot slash product dot slash I got lost utils slash contemptful. Sorry. Now we've imported it as contemptful. And now this will do contemptful. Client, we don't really need to do preview mode for this unless of course you wanted to, you know, also get URLs that haven't been published at all yet. That's a whole separate thing that I'm not going to do in this video. But what we can do now is we can check if this thing is here. Now, what's interesting about this is we want to do if you know, like there's no product, right. But what the contemptful reply comes back as for this get entries is going to be an array. And what we're really looking for is that array will have some metadata on it. And we've seen that in the previous videos. But in particular, the shape is going to be product items. And in this case, I'm going to use dot length because the items array will be empty if there are no records that match that. So we're doing a limited one, we're getting a product review type, we'll say, hey, it's equal to context dot params dot product. Oh, actually, we pulled that off though, right? Can we just do product ID here, because we copied it over from the other one, right? And so now we'll say, okay, the fields dot product ID is equal to the product ID that they passed in, go ahead and try to fetch that. If that comes back as an empty array, just bounce them again. And we can give them a different message this time, like instead of invalid token, we'll do something like invalid product ID, whatever, you know, message you want to put there. Okay, so finally, what we'll do is now just to kind of make this a little shorter and more readable code as well. Or not not to have so much down here, let's go and get that field. So we got, we can assume that if they got past this, we have a product, right? And we'll say, page fields is equal to and what we'll do is product dot items. And then we'll do at position zero dot fields. And so we'll say that's our page fields or whatever, you could do this multitude of ways. And then we'll say page fields dot product ID down here. So what we've just done is instead of using the product ID that they passed in, and just kind of trusting it as, you know, the actual link that we want to send them to, we'll say, you know what, okay, you pass the secret, you've passed in a product ID, your secrets good. Okay, well, let me hit Contentful, let me make sure that that entry exists. If that entry does not exist, I'm going to bounce you again, you're unauthorized. But if it does exist, I will go and I'll get the field of product ID from that actual record, not the one you pass me in. And I will redirect you to that. So now let's test that out. And we'll be good. So if we come over to here, in our browser, we'll go back. And we'll say, Hey, you know, let's hit API slash preview. And this whole thing again, do I already have my stuff all saved? Cool. Whoops. Yeah, I do want this one. So we've got this long token here secret, this might be hard for you to read. I'm sorry, I can't like zoom in the URL preview equals secret. Secret equals super secret and product. So let's do product like 37. Right? If we do that, we should get bounced for invalid product ID. But if we change that back to product one, it should be good. And preview mode is now enabled. Pretty cool, huh? So let's make sure that still works with this link. Of course, we'd open preview. And you know, our users are still good. Well, I think that that will wrap this one up here. As usual, I hope that that was useful for you. I really hope that stepping through this, you know, piece by piece and walking through and explaining everything was useful for you, as opposed to just, you know, a lot of times just going through the docs and just kind of like speed running it, you know, might give you the answer quicker, but not really tell you the whys and the particulars and might leave certain things out. So, you know, please let me know if you appreciated that or not. And I will do my best to improve upon that. But regardless, I hope to see you in the next video, and good luck to you.", "title": "Next.js + Contentful Preview Mode setup walkthrough", "url": "https://www.youtube.com/watch?v=HNDpkYJEjw4"}]