[{"text": "Hello and welcome to Swashbuckling with Code, I'm Jimmy Cleveland. In this video, we're going to cover the basics of publishing your first package, which includes publishing a scoped package. I'll have to assume that you already have Node installed and that you're familiar with the basics of installing packages, but that's really all you need to know to get going on this one. So I'm going to be showing creating a new NPM account so you can publish packages to it and just how easy it is to publish your first package and install it in a new project. Then I'm going to explain when and how you can unpublish a package, and I'll show that real quick. And then we'll switch over to using scoped packages so that we're not polluting the NPM registry namespace with a bunch of names that can never be used, just in case you're messing around and creating your own example packages for practice. I think it's a more polite thing to do. And now that you know what this video is about, let's publish a package. We're going to start by creating a really simple project that we can publish up to NPM and then install somewhere else so we can see this working in an action. So to do that, I'm going to create a directory. You can do that however you like. I'm going to use mkdir, and I'm going to just name it swashbuckling package example. I'm going to cd into that directory. At that point, I'll just open it with my code editor of preference vs code. It looks like it has to install an update. Great. So then in here, we're just going to create a file that's in index.js, you know, the basics of basics here, and I'm just going to console.log test package logs to console. Really, really simple just to make it do something here. We can go back to our terminal, and I can say node index.js just to run it in node and you can see that it logs to our console as expected. So after that, we probably want to make it a package. So I'm going to use npm init, and I'm not going to pass the dash y flag to say yes to everything this time because we actually do want to answer the questions here. So this is sort of a wizard to walk you through creating your package. So the package name will by default be the same as the directory that you made, which I'm going to go with. Then it's going to have the version here. Now I'm actually going to set my version to 0.1.0, which I'll explain in a moment. A description if you want to have one. Example package, please don't install. The entry point if you want to change it. So by default, it's going to be index.js. And that's why I created that file there in the root. We don't really care about a test command for this right now. And then a git repo. Not yet. Keywords is going to be useful if you want people to be able to search for it for specific things. So we could put, you know, example here if we wanted people to find it, or perhaps it's, you know, a React or Vue framework or Svelte or something like that. In this case, I don't want it to be found, so I'm not gonna put anything. And then the author be myself. I'll fill that in a moment. The license gets kind of tricky. It kind of depends on what you're doing. So I'm just going to leave it with default for now. We won't worry about it yet. So now we can confirm that everything looks fine. Yes, it does. Just press enter. Now, in order to actually publish this package, we're going to need an npm user for the registry for it to be assigned to. So I, of course, already have one. If you do npm who am I, it should print out who you are or if you're logged in. So this is my own, but I'm going to show you making a new one. So I'm going to npm log out, which if you want to see the list of commands, you can do npm dash dash help. And when you do that, it'll print out a bunch of stuff. Some of it's related to just installing packages and some of it's actually related to like your account. So we're going to be using publish pretty soon, but you can also see a login and a log out. And here's our who am I that we ran. So now when I run npm who am I, it will say this command needs you to be logged in. So that's what you're going to see if you didn't already have an account. So next, what we can do is we'll go over to the browser here and I already have npmjs.com open. You can just Google for it or go straight there. And this is where we need to create our account. So we can just do the sign up for free. There is an enterprise npm, but for most people, you're not going to be using that. And they're going to ask us to create some sort of username, which they'll identify us with, and then an email and a password. So mine's going to be crazy long. I'm gonna do swashbuckling with code. And then I'm gonna fill in my details and log in. And it's automatically going to redirect me to here. And I do believe you have to verify your email address before you can publish your first package. But let's test it and see. So now we can head back over to our terminal and try to log in as that user. So I'll do npm log in. It's going to prompt me for my username and then my password. Then it's going to ask for the email that I use for the account. And then it'll say I'm logged in. So if I do npm who am I, we're logged in. Before we publish the first package, I have to make a quick disclaimer here, you're probably going to want to hold off on publishing your own package and the steps that I'm about to do. Because it can actually be pretty difficult to remove a package from the npm repository. It's a nice thing that it's so easy and frictionless to actually get your own package up. But the problem is that once you push up a package, that name is reserved. So I would ask that if you are going to publish your own package, you try to pick a name that really no one's going to have like your username with package example, kind of like I've done. And I'm going to show how to unpublish that package. But if that package is used by someone else on the registry, you cannot unpublish it. And I haven't verified yet if you unpublish the package if someone else is able to reuse that name. I imagine they can, but I haven't confirmed that. Right after I show how to unpublish a package, I'm going to show how to make a scoped package. And that's a great time to follow along. A scoped package is going to let you tie package names to your username or your company name. And that'll make it to where you don't have to worry about taking up unscoped package names. I'll talk more on that when we get there. You of course can if you want to publish up your own package as you're following along. But I'm just recommending that as a courtesy to people because we could flood, you know, the market with a bunch of package names that then no one could ever use and don't ever get used. I might be overly cautious in this area. But now that I've explained that, let's move on with the video. So now that we have an account, it's pretty easy actually to publish. Let's try and see if we can yet. So you'll notice that we get this forbidden message here. And it's going to say, in most cases, you or one of your dependencies are requesting a package version that is forbidden by your security policy or on a server you do not have access to. So this is a pretty generic error here, unfortunately. So let's see if we verify the email, if that solves it for us. So in my inbox, I have this notification here, this email from NPM asking me to verify my email address. So I'm going to go ahead and do that. And then just do continue. And now we're verified. Let's see if we can publish now. And there you go. So I really wish that they would list that a little bit better. But it is in the documentation that you do have to verify in order to publish a package to the registry. So now if we go to our account here on the top right, you can click this profile or packages. If we go to packages, you'll see that our package is actually listed here. Swashbuckling package example. If I click on that package, sometimes that'll take a while if it's brand new. It'll take me over to what you would normally see when you look up a package here. And it's going to auto fill the readme if you have that in your project and a lot of that type of stuff. It'll even show the GitHub repo if it's over here. And it will tell you how to install", "title": "How to Create and Publish an NPM Package", "url": "https://www.youtube.com/watch?v=WRjJW8tseQg"}, {"text": "over here. And it will tell you how to install it. So we can click this to copy it to our clipboard and see if we can install it in a new project. So now I'm going to open up a new tab. So in this new tab, I'm going to create a new directory as well. I'll cd into my vids directory to do that. And we're just going to name this something local like package consumer. We're not actually going to publish this one. cd into that as usual. And so I'm just going to start with an npm init. I'll just do dash y because I don't care about that in this case. And let's see if we can install that package. So I can actually paste from my clipboard here, this npm i that I copied from the site. And it says that we've installed the package. So let's open it up in code and see. Go to our package JSON. And you'll see that we have this one dependency installed since I didn't use any flags to install it. So we'll say this swashbuckling package example 01. Okay, and then let's really quickly use it. So I can create a new file index.js or whatever you like. So because I haven't made a function or anything like that, I can simply just import it here. So I'll say require and then it should auto complete for me. And let's just do that. And I go back to my terminal, I can run node index.js, and boom, logs to the console. So it's really that easy to publish a package. So overall, I think it's a pretty good thing how easy it is to publish up a package. And you can see the benefits of that with the massive ecosystem that is the npm registry, and how much JavaScript as a whole has evolved because of it. But there is some debate in the community on how frictionless it should be, you know, how much more authentication should we have and accountability and all that type of stuff. And then not to mention the problem of, you know, stealing names really easily and then never being able to use them. And there was a time where you could actually just easily remove your package from npm. But then there were a couple of incidents where packages were removed that tons and tons and tons of other packages and projects depended upon and it broke all of them. So now they make it a little more difficult to remove your package. And they don't even let you if it's installed in other packages on the registry as far as I know. So let's get back to that version thing. In our actual package project, we had this version set to 0.1.0. And I said I would explain that later. Well, it's later. So this right here, by default, it starts you as one. And that's pretty normal. This is semantic versioning, which I'll cover in a later video. But the idea here is that they want you to start on a major version, and I'm starting it on a minor. This is a common way of signaling that your package isn't ready to be used as like an everyday package, or that it's not stable yet. So when you're ready for it to be completely consumed by users, you would change this to one, which you can use with version flags. So now I'm going to show how to unpublish this package. And then we're going to use scoped packages, which, in my opinion, is a little bit more polite if you're just doing, you know, example throwaway packages. It's pretty good for testing. And I also use that in a lot of my package conventions. So let's get to that. So we go back to our terminal here, we can simply put npm on publish. Now we're going to get this error because you either have to pass a version that you want to unpublish, or you have to pass this dash dash force flag to unpublish the whole package. So when I do that, you can see it goes through successfully. If in this other project that I had over here, the package consumer, if I were to publish that up, and it was using that previous package that we were just on, it actually wouldn't let me unpublish it. I thought about showing that, but it kind of increases the length of the video. So you can take my word for it or look it up. So back to this. Now that we've unpublished it, do you think we can republish it again? Let's see. Oh, that's interesting, huh? This message is actually useful this time. It says cannot be republished until 24 hours have passed. So what we've created at this point is called an unscoped package. And there's two types of scoped packages, actually. There are public ones and private ones. And for private, you need an enterprise account. So we're just going to do the public one for now. So you can actually put the at symbol in front of it to make it a scope. And then you can put a slash for the package name. So this is saying that I'm going to have multiple packages under this at swashbuckling scope, most likely. And then this is the individual package name. And that's how people will install it with this name. So now let's try to publish this. So you're going to see that we get this payment required, which immediately kind of sends the wrong signal. And I wish they didn't do this. It is required if you're going to do an enterprise one. And what you're actually going to need to do is you're going to need to pass a flag for the first time that you publish this. So if you do npm publish, you can do dash dash access public, publish publish. Now that gets us further, but it says the scope is not found. So the point of this was to show that if you're not doing an organization level account, you're going to have to use your username for the package. So I did this at swashbuckling, but I actually need to put the full username here. So that's in this code base here. So we'll say at swashbuckling with code. It's very long. Now, if we run this exact same command again, it then publishes successfully. So now we can go back to our browser. And we have zero packages because we unpublished that old one. But if we refresh, we now have this scoped package. So now this is scoped to your user. So you can feel pretty confident that you can throw up as many as you want. And you're not going to be polluting, you know, npm with a bunch of names that can't ever be taken by anyone else. But again, these packages are public. So anyone could install them or look them up. Unless you're using an enterprise account, which you pay for in that case, then you can make a package private. That'll wrap up this video. I hope that that was useful. Because when I was first learning to do this, all of these errors were extremely not helpful, especially when I wanted to get into scope packages and stuff like that. So I hope that that clears some of that up. In the next video, we're going to go over versioning, what semantic versioning is, and how to increase the version of your packages whenever you make fixes and what's the right one to select. So until next time.", "title": "How to Create and Publish an NPM Package", "url": "https://www.youtube.com/watch?v=WRjJW8tseQg"}]