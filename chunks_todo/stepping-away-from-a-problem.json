[{"text": "Hello, and welcome to Swashbuckling with Code. I am Jimmy Cleveland. Today, I want to do something a little bit different. I've had something that I've been thinking about, and I just want to talk about it today. There's not going to be any code on screen, so if that's all that you're interested in, feel free to skip this one. So what I want to talk about today is something that I talk about, I guess, somewhat frequently with my team. It's something I'm really big about, is walking away from problems, and more specifically, knowing when to walk away from problems. Now, I'm not talking about walking away from your personal problems. I'm talking about coding problems or challenges, or really any challenges in life that you're really trying to critically think about. So to kind of give you just a quick example, you know, imagine that you're problem solving something in your code, and you have this bug, and you just can't quite figure it out. It's really just your nemesis at the moment. No matter what you try, you just can't seem to solve it, or process it, or anything. You know, it could be a bug, it could be that you just don't understand the code, and you're really trying to grasp it, anything like that. So imagine that scenario. What often happens is that you will sit there, I know I do, and focus on that problem, just kind of like waiting for it to solve itself, or just trying to figure out, okay, where's the next avenue that I need to look down to figure this out? And I'm just here to tell you that a lot of people take for granted and don't talk nearly enough about just walk away. Honestly, stand up, you know, stretch your legs out, get some water, get some air, I don't know if it's fresh air, but whatever air you can get your hands on, you know, walk outside if you can, take a walk, five minutes, really, just at a minimum, just try to take five minutes. And wow, how many times the problem will either be solved, or I will completely realize that I should have that I should have come at this from a different angle. The amount of times that that works out in my favor is always astonishing to me. You know, I'm the type of person that when I get deep into a problem, I don't want to walk away. But there are certain signals that you can learn to watch for in yourself. And I really think this is like a hallmark of a seasoned developer. It's something that I've developed a lot in the last year or two of my career that I wish I had started from the very beginning. It's one of my great, you know, regrets. You know, I don't really think of it as much as a regret, but it would have been a lot more efficient had I started that way, say it that way. Where there are these clues that you can look into that you'll notice kind of like tells within yourself. So one of them for me is making silly mistakes, especially syntax mistakes, things that I know that I know better. Once I have a couple of those, there's kind of a little bell that goes off in my mind. That's like, you need a break. So, you know, you have a syntax error and you try to run your code and it doesn't build or it has a runtime error or whatever. And then, you know, that's like, okay, whatever that happens, right? It happens to everyone all the time. But then you have another one right after it. And then especially if you have another one right after that, take a break. There's a good chance that you're just, you're getting a little mentally fatigued. And here's the thing. If you take that break, you're probably just going to feel a little bit better. It's only going to be a few minutes. You know, you're not going to forget the problem. It's fine. But one thing that is really just not talked about enough, in my opinion, I can't stress this enough, is background processing. Let your brain background process that problem. From my experience, the way that I kind of think about it is that there is a certain amount of effort that when I put into a problem, my brain essentially will say, whatever the background processing part of my brain will be like, okay, wow, I can see this is extremely important to you. So I will work on it. Fine. And then you just walk away. And the best thing you can do is not think about the code. Don't think about the problem. Think about anything else, you know, creative pursuits are great. Or what do you want to do on your weekend? Or just anything at all. Just kind of, you know, chill out. And so often, what will happen is that you'll either just have this awesome epiphany, that happens less often, but it does happen often enough for me to feel that it's a reward that's worth pursuing. But if you don't have that epiphany that just solves the problem immediately, you're probably going to have some sort of either idea about a different way to solve the problem, a different way to troubleshoot the problem, or a different avenue of attack, or something like that, you'll realize that you're kind of like, you know, wasting time the way that you're doing it, and that there's a better way to do it. This happens so often to me. So I really can't stress this enough. I think this is a vital skill, and you will save time, and you'll feel better. Whenever I can code for a large amount of a day, it typically falls very much in line with how often I take breaks, you know, how well hydrated I am, if I exercise that morning, all those things, you know, your mental health, your physical health, all play a factor in it. Don't just sit there and slog away at the computer all day. You'll feel worse, and you'll get less done. That's my experience. So it can be easy to just get lost in those problems and just want to keep solving it. It's the hardest when you're in the middle of it, and you just can't quite pinpoint what it is, and you're like, I'm so close, I know that this is going to work. But just trust me, just take a five-minute break, walk away from it, and you're not going to forget the problem. In fact, you're probably going to come back with better insights. Just try it, okay? Now, so how can you try that? How can you enforce that? It's pretty hard to notice those things in your mind right away. It's something that you should just try to be aware of, and you'll develop over time. But a great way to jumpstart that, in my opinion, is Pomodoro timers or any other timer that's like it. Pomodoro timer is essentially 25 minutes on, 5 minutes off. So you work for 25 minutes, take a 5-minute break. You come back, you work for 25 minutes. You do that cycle four times, and then you take a 25-minute break. This is fantastic for pair programming, in my experience, or mob programming or whatever, because it's a natural switch time. It keeps everyone more engaged. And I think everyone just does their work a lot better when they have these little intermittent breaks. My team loves it. I was pushing for it for a while. We don't do it often enough. In fact, that's one of the things that gets brought up a lot in retrospective, is that we need to do Pomodoros more. So that's really cool. And I like to hear that feedback. And you can definitely tell engagements better. Everyone who's on a call is less lethargic because they can just get up, take a break, get some fresh air if there is any, etc. So try it out. I think Pomodoros are really cool. And like I said, I'm not really strict about the four-on 25-minute break, although I would like to try that more. It just doesn't end up lining up with lunch super well for me because you have to be pretty disciplined about taking the breaks when you do and not get interruptions and all that. But one note that I have on it before I leave that topic, be very careful about stretching into your five-minute break. It's fantastic to have a timer that just automatically starts your five-minute because then you have to actively pause it, which, you know, it's better to be active about that than kind of letting it happen in the background. Because you will want to keep going. You'll be in the middle of something and you won't want to quite take a break just yet. And that's okay to an extent, but really more than like a minute-ish, you got to be real careful. You know, if you just need to really quickly wrap something up and see it run, okay, cool. But you got to set a limit for yourself because you'll turn that 25-minute tomato into a 45-minute very quickly. So you got to be careful with that. So I think that that's very important. I just wanted to put that note out there. Be careful with your five minutes. Try to take them right away. You'll be fine. Like, you'll be able to pick up where you left off and it's probably going to be for the best, you know. Like I said, if you're right about to, you know, run the code one time and see how it is or whatever, fine, cool. You know, you wing it. You're the boss. You can do that. That's just my word of advice. So take it how you will. So I think that's all I have today. I think that sums up my points pretty well. There's, obviously, I could talk on and on about this, but for the sake of some brevity, you know, let's call it here. And if you're interested in more thoughts or just general learnings or experience, anything like that, you know, please let me know in the comments, you know. Give me a like if you like this video. Give me a dislike if you don't. It's fine. You know, I just want to know what is going to be the most valuable for your time. What are you interested in learning? You know, is this a waste of your time? Do you only want to see the code tutorials? Or are you interested in this from time to time? Or you'd like to see more of it? Just let me know. But hopefully it was valuable to you if you sat through this. And I hope you have a fantastic day, week, weekend, whatever it ends up being before the next time I see you. So, take it easy.\n\nBye.", "title": "The Skill of Stepping Away from a Problem", "url": "https://www.youtube.com/watch?v=coabHZWlM_Q"}]