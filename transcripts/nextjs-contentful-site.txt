Hello and welcome to Swashbuckling with Code. I'm Jimmy Cleveland, and the goal of this video is to get some data from a headless CMS into our Next.js site. The headless CMS that we're going to be using is called Contentful, and I've chosen that because I have a fair amount of experience with it, and I've seen it growing in popularity, especially in the enterprise sector, where more and more companies are starting to adopt it. So I do think it's a good tool to have in your tool belt, but I do recommend learning multiple content management systems since it is a rapidly growing tech trend. It's just good to have a general familiarity with how these systems work. Keep in mind that that doesn't mean that this is my favorite CMS, it's just a generally solid one that a lot of people like, so I've chosen for this video. For the Contentful setup, I will be creating a new account, just so you can follow along with me and see what it's like to create a Contentful space, as they call it, create your first content type and content entry. And I'll be explaining some things along the way, whatever is necessary to get our minimum viable setup going for consuming that data in Next.js, but I won't be going over every little detail of Contentful in this video, just so you're aware. I'm assuming most people clicking on this video will be familiar with Next.js, which is what we'll be using as our JavaScript slash React framework of choice for this video. So while I will be walking through each of my steps so you can follow along, even if you're not very familiar with Next.js, I do think it'll be easier if you have a general familiarity of the basics of it and what it does, and of course with React and JavaScript. I won't be going into what exactly is static site generation and what's server-side rendering, or even why should you choose a headless CMS over other content management systems. It would just lengthen the video too much, and so I'm trying to keep this to sort of a minimal setup, where I do spend some time walking through, you know, what is Contentful and how to set that up, and what are some of the steps of Next.js. But our primary goal is just to get those two things hooked up and generating out pages with minimal setup. So feel free to use the timestamps if you have a specific thing that you're looking for. One last note is that I do plan on making some videos in the near future of some additional features of this particular setup, such as preview mode using Contentful and Next.js, as well as dynamically generating out pages by a slugger ID. And now that you know what you're in for, let's get into the code. I'm going to kick us off here by creating the Next.js project. So you can do that by doing npx create next app, and then at latest is usually what they recommend. I'll press enter here. And we can name this whatever we want. So we'll call it Next.js Contentful site. And then depending on your connection and everything, it'll take a little bit to run this. You can see it's installing React, React DOM and Next, and then for dev dependencies, ESLint and such. Now, just so you know, I'm on Node version 16.14.0, in case you want to follow along and you have any issues or anything like that during installation process, you might want to be on the same one that I'm on. But it should be fine on many other versions. So now what we want to do is go into this directory that they've just created for us. And I'm going to open it in my code editor of choice, VS Code for now. And as that's open, what I'm going to do is I'm going to flip back to the terminal and I'm going to start this by running npm run dev. Now, you can find all that out by going to here. Let's see, the docs for Next.js. You can go to docs and I'll link this in the YouTube video, but you can just search Next.js on Google. Scroll down here in the getting started and here's that command we ran. And you could also use yarn and we could have done TypeScript, but I want to keep it as simple as possible for people following along. Scrolling down here, you'll see that here's the scripts that we're going to take a look at in a moment that you could run. And even down further, this is just a basic example of like the simplest component that you can export here. So let's go back to our code. We look at our code, we go to package.json. Here's the packages that are installed. And so also if you're following along and you have any issues or whatever, you might want to try to make sure that you're on the same version that I'm on, 12.1.0 for Next, and that will subsequently install these. We also have these scripts here and that's what we're running right now is dev. So if we go to pages, this is the way that Next.js works. When you create a file in pages, whatever you name it is going to be the path. So you can do product1.js here, just right in the root of pages. And just so you can see real quick, this is our index.js. So that's like our homepage, pretty standard format there. And they came with a bunch of like code already set up for us, which we're going to see, but we want to create this product1 page. So the minimum thing to do that is to do export default, it has to be a default export, and then do function, and we can name this whatever we like. So I'm going to name it product page. I really recommend naming it and not doing an anonymous function because it will show up in the stack trace. Instead of being anonymous, you'll have product page, so it'll help you get to an error quicker. Then just like a regular React component, we'll just return some JSX here. We'll say hard coded heading. And then let's go back to our server that we started up and running that went on localhost 3000. And here we are, here's that homepage I was talking about with all that code they started us with. This is pretty standard, nothing crazy, but it's nice. It points you to where you can kind of start editing stuff. We want to go to the page that we just created, which is slash product1. Okay, so we have our server, here's our homepage, here's our product1 page that we just created. It does have hot reloading, which is really cool. I'll just show you that real quick, so if I were to change this to hard coded h1 or something like that, if I flip back over, it's instantly changed. You know, nothing crazy there, it's just, you know, hot reloading is pretty nice. It's a nice time to be a developer. So next what we want to do is kind of scaffold this out. So what I'm going to show you is there's this method you can go to in the docs called getStaticProps. And this is pretty much the, I would call it the default method of what you should be using if you are doing any sort of static generation or you're just kind of doing a lot of static generation. Static generation or server generation, because there's also a couple, like there's this getServerSideProps that you can use as well. So let me really briefly kind of go over the difference between these. So one of them is using static site generation, which is just doing it all, building all the pages ahead at build time. Okay, this is usually what you want to use because it's going to be the fastest for your users. You're going to incur a little bit of a penalty on build time. You won't notice it much until you start doing some pretty advanced stuff, you know, much larger scale. But the getServerSideProps is also really fast. And it's a good alternative when you need to do something dynamically, like you want to know what your user's location is or what their device is or something like that. That's the time where you kind of opt into server side props. There's other times too, I'm glossing over it. I just want to give you a quick overhead that there's these couple different methods that you might use. And how you would use that, you can see, let's actually just copy this. As you go back over to your code and on any page, it's kind of cool, you can opt in to this behavior. So normally it's just kind of like, you could think of this like createReactApp or something like that, it's just a regular component. But then we can do this export any function. I'll leave off async for now, actually. Normally you would do an async function, but I'll just leave it like this just so you can see. We'll clean up all of the clutter. And this will essentially just make it work. Let's go back to our thing, server here, reload, and it runs just fine, right? Now, let me show you when it doesn't run fine. So let's say we didn't put that, we just exported the function. What's really nice is Next is going to let you know, hey, getStaticProps function did not return an object. Okay, so they want you to return an object, and then subsequently they're going to tell you you need to return props with an object. So this name is important. Next.js is looking for this name specifically getStaticProps. And for our purposes, we're just doing this like one single page, pretend we're doing a product review website or something like that. So normally you might dynamically generate these all based on the slug or ID or something like that, but we're just going to keep it simple, minimum viable. We're going to set this up in such a way that we're just creating every page. We're kind of starting out and we're like, all right, we only have a few product pages, so we might as well just hard code those. So this could be whatever path you want and whatever name. And now how you get the data from this into this product page is through the regular props, just like a regular React method. So what are we going to want here? Well, we would want something like props.heading. So let's provide that for ourselves. We'll go to props and we'll say, oh, well, I want a heading here. And we'll just hard code it for now. Let's see, getStaticProps.heading. If we go back over to our site, we should be able to refresh. And there you go. We just get it. Now, if that seems a little pointless to you, well, right now it is. But what we are wanting to do here is this is a function that runs at build time. So you might be used to something like, if you're just doing a regular single page app with React, you might do use like useState plus useEffect here, and you'd do a fetch and you'd hit some API and then you'd render some data. That's all client side. And so the user has to wait for that after they've already downloaded the document and everything. This is doing this at build time. So we're going to get data from headless CMS here, or fetch an API or whatever. And that will run at build time and pre-generate all of that content out into the HTML so when they get the document, it's already built into the page. It's pretty cool. I'm not going to go into all the depth of showing that for here because the purpose of this is to hook up to Contentful. I'm just kind of trying to give a quick overview for those who aren't super familiar. So now that we have our kind of scaffold set up, we know what we want. Let's go to the Contentful website and set up our account. So we can go to Contentful.com here, and I'm going to do sign up for free. Now, this page is very corporate-y. It's very enterprise. You might be a little thrown off by the, they need a company and they want to work email. And if you go to sign up, it's all required, right? So don't worry about that. You can just use GitHub or Google, and they have a pretty generous free tier. You can totally use it just as a regular developer. I'm actually showing Contentful because it is, you know, appealing to a lot of enterprise companies right now. So it's a nice skill set for you to have, but you might also want to use it for just, you know, your own sake of knowledge, or maybe you're just dabbling with a bunch of CMS. So I'm not going to have you watch me fill this out. I'm just going to, you know, make an account real quick, and I'll skip ahead. But the one thing I do want you to choose is like, make sure you choose JavaScript as your development platform. That might matter. Job title, you don't have to worry about this. Just do other, and then maybe like developer job function, whatever you want there. Okay, I'll see you on the other side. Okay, I finished signing up, and it's just loading now. And then it jumps over to this tutorial, which is pretty cool. So kind of follow along with this on me. You could totally do it your own way if you want, but if you want to follow along, here's what we're doing. We're going to do don't know yet, so we don't have to answer anything. And then I'll do, I decided to use Contentful. These are the important options. We want to do that we're not at all familiar with anything, and that's because we want to go through their little tutorial. It's pretty neat. Okay, so here we are at the quick start guide. Now what we're wanting from this is essentially, it's going to walk us through creating our content model, a single content type, the entries on that, and then, well, yeah, an individual entry for that content type, the fields on that, that's what I meant. So a content model, what is that? You know, they have a quick little description here. It's essentially, you know, the schema for your database or something like that. It's how you're going to store all of your data and what you want the content structure to look like. It'll make some sense as we go, but that's kind of the overall database here for your CMS. So we have this editor view here that's showing this. It's a cool little diagram here where we have this news article. This is what we're going to look like when we're editing things. And that is rendered based on this right here, this news article content type. It has a heading field, a hero image field, and an author field, which you can see is a one-to-many relationship here. That's what it looks like anyways, of this author, also a content type. So these two different content types kind of drive this. So let's design our content model. Yep, we want to create our first content type, cool. And then here, I've already done a little dry run here. So you can see I've got some auto-filling, but this is a product review that we're going to make here. Make whatever you like, of course. And a brief description. I'll show you where this shows up for products. So this is just the content type. You can type whatever you want here for the description. When I create that, it's going to ask me to add my first field to it. So I'll add a field, and there's a bunch of different types. I'm actually going to go over some of these in future videos, but for now, we're just going to stick with text to keep it simple. We'll choose a heading. We'll choose short text, which don't worry about it saying exact search. There are different methods you can use to search. It doesn't have to type it exactly. I'll show you that. But we're just going to call it heading. It'll automatically give you an ID, and we want to do create and configure. We could do create and come back later, but I just want to do it right now because I want to go over to the validation tab and pick required field. So I just want that to be required, nothing crazy. And then there's a default value, which is new, and that is very cool. I'm pretty excited about this, but we don't need it for this purpose right here. There's also an appearance. You can pick what you want the field to look like, which is pretty neat. You can embed it in a YouTube video or something like that, but we just want some help text here. So I just put, this will be the text for the H1 tag. I'll click confirm. And now I have my first product, and you can see here's that little description. So this is the first content type in our content model is a product review. If we click save, that will walk us over to, or actually it'll just save, sorry. It wants us to click content. So it takes us over to content when we click that. And this is normally where you'd add all of your entries. We have nothing yet, so we'll click this. And now we're going to create our first entry, which is like an individual instance of a content type. So we'll create and edit an entry. And all we have to do is fill this one field out that's required, and you can see here's our helper text. And I didn't really mention much about the helper text here. It's sort of implicit, but if you've never been in this situation before, this can be really nice if you have like content editors using this and they don't quite know what these fields map to on the website. It can be nice for little hints like that. At least that's what I use it for. So now the heading will put the very first product, bang, bang. And now as soon as it saves, it'll let us publish it. And now that is published for us to call from the SDK or an API. So let's go to Space Home. And that just took us right here, Space Home. And then here we've done our first couple of steps and they now want us to fetch content from the API, which is what we want, of course. They give us a space ID, content delivery token, and the actual entry ID, which is really nice of the thing that we just created. You'll see how we use this in just a moment. Come down here and it wants us to make our first request. I've actually tried this curl command and I couldn't get it to work. I tried messing with it in different ways and just never worked for me. So if you have that problem, don't worry about that. If you got it to work, then you're smarter than me. But go to JavaScript and there's a little guide that we're gonna follow here. With this JavaScript guide, you can just scroll down and it wants you to install Contentful. Let's just do that real quick. So go back to our terminal, we'll shut down our server and PMI Contentful. So that will default save it to our dependencies. Okay, we might as well start our server back up. Come back to the browser and you can see that we can just import it this way. Now we're using ES modules, so we might run into a little thing with that in just a moment. I'll kind of talk about that. But what we really want is this initialized client. So I'm gonna copy that for now. You can guess I could just click copy on. And I'll come over to here and let's see in our editor. So now what we want to do is we're gonna want to use this here. I'll explain that in a moment. But, or why we're doing it there. Let's say that we wanted to, they had this like var, Contentful equals required. This is just like normal JS, like you're using it as a script in the browser or whatever. And Contentful. So if we do that, let me show this. We can just log it right now, just to see. And I'll comment this out so we don't run into an issue with that. So I'll log this out so we can see if it's working or not. We'll go to our server. We have to actually refresh or like hit the server curl or something to get it. And let's see. Module not found, can't resolve content. Oh, I had a typo there. Contentful. Sorry about that. Okay, so it ran. And if we go to our server, we'll see right here, it logged it out. So it did work, but I actually don't want that. Why? Well, if you go back to index.js, you'll see that we're using ES modules as kind of our standard. And it's cool that that works, that we can do that. We can actually do that in conjunction with an import. So we could do import like link from next link. And this will work fine, but I just don't know what the ramifications are for that. And I don't really like mixing the imports here. It just gives me some concerns. So I was like, well, I'll do import contentful because usually if they support ES modules, you'd be able to do it this way. And they do say that they do. But what happens here is I'll get rid of that. And then I'll hit the page. So we're just gonna use an ES module version of it. Go back to the terminal, and you'll see that it says contentful undefined. That's really unfortunate, right? But let me show you how to deal with that. So what we can actually do, if you don't know any better, you could try and just do this star as contentful. And I'll kind of show you why that is. Let's refresh this, see if it works. And you can see it does work, right? That's pretty weird, huh? There are some docs that I did finally find that walked through that they wanted you to just do. This is an alternative you could do. Pull off this create client, sorry, method from. So you can always destruct like that. But how come the default didn't work? A lot of times when you use a library and you see the common just way to import it, which is like this var contentful or const contentful equals require, whenever you see the require syntax, you would think that you could just import this as default like we did before. So the reason that this is, is because sometimes when they support ES modules, they just kind of don't bundle it that way. They don't set it as the default. And so just a little troubleshooting tip here, you could go into node modules, it's going to get in the weeds here. But if you come down to the package contentful, what I'll do is I'll take a look at their package JSON. I'll be like, do you have a module type because webpack and some other bundlers will use that as a sort of flag that that's where the ES modules are. And they'll just continue to use main as like regular common JS. We do see that they have that. So we could go into their dist ES modules and it's telling us contentful JS. And in here, I'll just search for exports. And so with exports, you're commonly going to get this one because this is just part of the bundler, the exports ES module setting it to true. But then there's one more and it says exports dot create client. And that's the only one there is there's only these two. So we know that there's only this one export apparently. And whenever it's exports dot, that's going to put it on the exports object. So that's what's going on here. That's there's there's no default here. That's been set up. We just have this exports object. So we can import star which is like import the whole object and name it contentful. That's just the way that I like to do it. So I can kind of keep the same contentful dot create client syntax. Cool. So just a little tip there if you're you know, we're stuck in that land, can't find it in the docs or whatever. So I'm gonna get rid of all that. And we'll just use this syntax going forward. Import star is contentful. Alright, I'm happy now. So now we have this client. And we want to connect this up, right? So, hmm, okay, what do we do here? Well, we go back to this little tutorial here in our contentful. And they have given us nicely this space ID, I'll copy and paste that now this is public. It's perfectly fine for this to be known. In fact, it's right here in the URL bar. It's how you access it. I personally would still keep it secret because it's just another attack vector. But it's not the end of the world if you share this, however, access token. Don't share that. Make sure no one knows this. You can see mine right here, because I'm just gonna hard code it here just to get it running really quick. And some alarm bells should be going off for some of you, please don't do that. I'm gonna remove this space first of all for myself. But if you are following along here, do not commit this up, because this will be a headache for you. You'll essentially have to generate a new API token. It's not the end of the world. You can't really get it out of git history. It's kind of a nightmare to try. I've been in this situation before if you accidentally commit this up. So don't commit this right now. I will show you how to obfuscate this in a moment. For now, I'm just going to try and get this connecting, right? So we're all over the place, sorry. Now we're at this point where, okay, I'm getting the client, but why are we doing it here? You know, how would you know to even do it right here? Well, you can think of it this way. This git static props, right now it doesn't really matter. It's only going to run this one time because we have it on this one page. But if we were to do this dynamically, there's a time where we'll run this function for every single page that we're generating out. Anytime you're putting something in a function, just kind of expect it to be rerun. We don't want to recreate this client over and over. We kind of want the singleton behavior. So you could put this in another file. I'm just trying to co-locate everything or less fancy terms. Just put it all in the same file for now to keep it simple. But if we put it right here, it will just run as soon as this file is imported. So whenever Next.js uses this file, it'll run one time. And then everything in the scope of this file has access to that. Okay. That's just the way I prefer to do it. So now we'll have this client and let's go back to the docs and make it do something. If we go back here to this like JavaScript thing that we were following along on, I'll make sure to link these as well, both of these in the YouTube description. You can go to request a single entry. That sounds great. So let's copy that code, come back over to here, and we're going to run that right here. So we have the client. We'll call the client. We'll call client.getEntry, which is essentially a fetch here. And now we just need an entry ID. And then when it comes back, it's going to log these things out. So let's get that working. Go back to our space. And here's the entry ID. This is really nice of them to show you this. Okay. So we'll copy that. So this is for the very first product. It's the ID that we just created, or that it created for our product. And we'll paste that right here. We'll save that hard-coded. And then now we will hit our server. Boom. And go to our logs in our terminal. And here we go. Now you'll see that we got all this metadata for the first log, but then we got undefined. All right. So sort of so far so good. You can see that is our space and everything. But what we really want, you can see that it's a content type of product review. What we really want, sorry, is this right here. They gave us product name, and I didn't switch that to heading. So hopefully that's kind of making sense that what we're getting back is the entry that we created. There's some system data forward or metadata or whatever, but then field is really what we care about. Let's go back to that just to kind of cement that in your head. If you go to content here, these are all your content entries. And you click this one, and these are your fields. Okay. Or another way to look at it is go to the content model, click on the thing, and these are your fields. Okay. So we have a field of heading. Let's try and rerun that and see if we get it. Reload. And there we go. The very first product. Cool. So now all we have to do is pass that data along. Okay. So we can just pass that along to our component right here, product page, the way that we had already set up. But because we're in this promise, we actually would need to like, you know, we can't just return in this promise, essentially, we'd have to return the promise. But, and that will work fine. But I think it's a little more straightforward to do it this way. Because we're like, how do we get the data out of the promise after we're done? Well, we'll just set a sink here, like we originally had. And then what we can do is we can say const, let's call it product equals client dot get entry, you know, we don't even need any of this. We'll just fire this off. And whatever comes back will be the product that we get. And here we could do product dot fields dot heading. Oh, I didn't do a wait here. That's cool that they auto completed that for us. I actually want to do that up here. Sorry. That's kind of interesting. So I want to await this fetch and then move on to pass this into here. And this should just now work. Okay, our heading should change now. Reload the very first product. Cool. So we now we have a contemplable space with our first content type, and then pulling that data in to our next JS site and rendering it on the page. Pretty sweet, huh? So if we go back to Contentful, just in case you were following along, and for whatever reason, you didn't get these like home screens or whatever, all this stuff, let me show you how to get some of that information. So the first things first, you can go to your content entry, you can just go to content, click here. And if you click this info over here, that's where your ID for the entry is. Now a lot of times I won't be using this most of the time, because I'll be kind of just like going through a loop and generating them automatically. So I don't have to look them up by ID. But just in case you ever need to, this is where you get that information. Also, for the API keys, you can go to settings and API keys, and they just have this blank one like auto created for me. So I'll name this like next.js or something like what it's for. And then scroll down and here's your space ID. And here's your content delivery API access token and all that stuff. Okay, there's also a preview token, which is for like when stuff's in draft state, you want to publish it, I'm actually going to do a video on that too with next JS preview would be pretty cool, but I'm not going to go over it right now. That's for a future video. Okay, now I promised you that I would show you how to deal with this stuff. Okay, so we don't want this in here for when we commit our code up. So how do we obfuscate that? Well, the normal way is with an EMV file, you see, we don't have one by default. But if you go to their git ignore, this kind of clues you in, they have these dot EMV local development test production files ignored. Okay, the quick overview of how next JS handles this is you could actually just use a dot EMV file, they'll read that as well. But dot EMV dot local is really what they're intending for any like secrets and stuff like that. That's because the regular dot EMV, we come back to that. The regular dot EMV dot development, not dot local, just dot EMV dot development is a file that you can use along with production to kind of put some defaults that your system will run on. And then you can have some very specific things that you want, especially like hidden secret keys and stuff like that API keys, you can do in dot local or the dot local versions of these. Sorry, if that's a little confusing, just for now. Usually you'll be fine. If you have any secrets, just storing it and dot EMV dot local. So Contentful, I'm going to name this Contentful space ID. And then I'll do Contentful access token. Those are the two that we need. I'll just copy these. So I've got the spelling right. And then here, what I can do is I'm going to copy this one to this one. And I'll copy this one to this one. Okay, so there's our file. And you can see it's not being tracked. It's gray here. So it's not wanting to track it. That's what we want. And then for these, we can just do process. This is just like node dot EMV dot, and then that name, this name right here. I'm making a mess of everything. Sorry. Same thing here. Replace this with process dot EMV dot. Put that there. Beautiful. So now let's make sure that when we refresh the page, everything's still working. Looks like I messed something up. Expected parameter access. Oh, you know what? I think we have to restart the server because we added some EMV files. So let's do that. Come back here. Refresh this. There we go. Very first product. Still working. Cool. So we have a really basic setup here, and we're pretty good. Let's just wrap this up by adding a couple more fields to make it a little more real here. So I'll go back to my Contentful instance. I go to content, and you can just discard those changes. We'll go into this. Actually, we're going to go to the model. But notice right here for the name, it says the very first product. It's by default using the heading. Okay, we're going to change that. So if we go into our content model, product review, we can now add a field. I'm going to add another text field, and we'll call this subheading. I'm just going to create it. No stipulations. And then we're going to add another field. It will also be a text field just to keep it simple. And we'll call this product ID. This one we are going to create and configure. We want to do a couple things here. We want to say this field represents the entry title. Sorry about that. So this will represent the entry title, and that's that name that it showed whenever you're looking it up. So this is the thing that we'll see as the default. So imagine that we kind of want to tie each of these review pages to a product ID to find it easy so we don't have to search by heading or whatever. Then we'll go to validation. We'll do required field and unique field. So we want, you know, it's an ID. We want it to be unique, and then we want it to be required. And that's pretty much it. We could do a placeholder or something like that, but I don't think we need to. You can rearrange these however you like. We'll click save. Then we'll go over to content. In the content, you'll notice that this is untitled now. That's because we haven't filled that out. So we added a field, so we can't publish until we add this required field here. So we'll call it product one. Then for the subheading, we'll do a cute subheading. Okay, so while we're here, let me show you the search thing I was mentioning. So one little quick pro tip here is you can, if you like wanted some extra fields to find, like, you know, say you've got a lot of different entries in here and you're trying to find one, you know, you could even have hundreds, you could click this little cog and come down and you can show whatever fields you want, which is very nice. So heading, we can do the very first, let me zoom that out just so you can see it. It's very first product. So you can see it. That's what it normally would look like. I'm just zoomed in to make it easier to read. Now, if we're searching for things, this is a little tricky because if you search for like, let's see, will it actually search by very first? Let's do first. Oh, that actually does work. It's like weird because it's wrapping. It's throwing me off. Okay, so if you're ever wanting to find something and you can't find it by a regular search, you can click filter and you can come down and you can filter by any type you want. So you could do heading and it says it is an exact match. So if you type a letter, it's not going to find anything. If you type even like first, it's not going to find anything. You'd have to type the exact, the very first heading or product. Bang, bang. Was that what it was? Yeah. And then it'll find it. But what we can do is we can change that to matches. This is what I was talking about earlier. You can make it a loose match here and then you can change it to a match. So if you're a loose match here and then you can just do like first, boom, it'll find it. Just another way to search through your stuff. Okay, let's bring that data in and wrap this up here. So coming back here to our product page, all we really need to do now is pass the rest of the thing. So what we're going to expect is let's wrap this real quick here. Let's do a div. I wish you would do that. Okay. Oh, I don't have formatting. Bleh. Okay. So we have a div, we have an H1. Now we're going to want an H2 with props.subheading. And let's console log props while we're here, just so we can see it in the actual page. So we're not passing that though, but we are getting it because we're getting the entire entry. So what we could do is we could pass the entire entry. So we could pass the entire entry. So what we could do here is instead we could change this to, okay, well, what if we just spread product.fields? Okay, because that's entry.fields or whatever. So all the properties that are on fields, we could just spread that into this object, or we could just assign, you know, whatever we want to the fields object since it is an object that's fine too. But let's just do that for now. Now, when we go back to our browser and refresh, we get it. Okay. And if we inspect, look in the console, you'll see this object, go away, that also has the product ID. So we've just effectively spread all of the fields just to kind of clean up the data for ourselves and give us all these different things that we can access. We're not even using product ID, but you know, they're all there at that point. You can do this however you like, massage the data however you like into the format that you want. You could also put this on like a product key or something like that, you know, some extra stuff, but we'll just leave it like this to keep it simple. So that'll wrap this whole process up. You know, I hope that that was useful as a kind of quick and dirty, this is how you set up Contentful and Next.js to get a sort of working product. Like I mentioned, I'm going to have some videos in the near future where I'll show some additional features such as preview or dynamically generating slugs and all that good stuff. But I kind of wanted to just get you up and running so you can see, you know, it's actually pretty simple once you know the right places to look to get this whole thing working. It's quite elegant. So I truly hope that video was helpful. Please let me know if it wasn't, and I hope to see you in the next one.