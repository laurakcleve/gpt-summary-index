

Hello and welcome to Swashbuckling with Code. I'm Jimmy Cleveland. Today I want to talk about imposter syndrome and how to manage it. I say manage it because I don't know if it can ever really be defeated or eliminated. I'm sure some people might not feel it, but I think most of us do to some degree. And I feel it and I wanted to share some ways that I've found helpful in managing it. While it's not uncommon to find talk in the wild about imposter syndrome, I really don't think it's brought up nearly as much as it should be or held to as much import, at least in the coding community, and I would say let alone the rest of the world. So the first part of dealing with it for me is to accept that most people have it. Now you might commonly think that it is a thing that rookies or new people to a profession or just new jobs in general, maybe you've been working on that profession for a while, but you just have a new place that you work, that those are the type of people that have it. It's definitely not programming. First of all, it's very widespread and you can easily find people online admitting that they've had imposter syndrome at a job that they've worked at for over a decade. I also think that the internet has made it far worse probably because you really can't go online to, you know, let's say tech Twitter or Reddit or Hacker News or wherever that you go online without seeing people do amazing things every day in social media and as we've all, I hope, learned at this stage in the social media driven world, it's not a healthy way to compare yourself. Our brains love to group things together, especially the experiences of people. It's kind of like how you'll hear someone say, you know, Twitter hates this thing or Reddit is obsessed with that thing. You might think that that's pretty small to say this blanket statement, but I think that really echoes in the way that we think about the world. It's so anecdotal though, like these communities are large and it's ridiculous to assume that they all think the same way or feel the same way and when you especially know that you can go on Twitter any day and see people hashing it out and fighting, so they obviously don't have aligned views, but we really like to kind of aggregate those together. So we love grouping things, I would say because our brains are lazy and we'll see this thread that has, you know, 20 or even fewer people saying, I love XYZ framework or technology or tool or whatever and our brain just love to over exaggerate how many people that is. I've even found myself, you know, talking to my wife or a friend or someone and saying, oh yeah, everyone seems to love this new thing or whatever. When I stop and think about it, it's like, that was like 10 people that said that. Why did I say that? Or even worse, you'll learn about something new and you'll go to a colleague and you'll say, everyone's talking about this new thing when it's really just your small little circle and it was maybe a couple tweets or something like that you saw, you know, ended up being a handful of people. I'm not saying that that doesn't mean that a lot of people are talking about it, but we like to over exaggerate things. So I guess the point that I'm getting at here is that keep in mind that your circle of influence is relatively small compared to the vast world out there. And you have to be objective about that and navigating it to stay sane. People are going to show their best side online. Just because you see a bunch of people learning something or doing cool things, you know, that doesn't mean that everyone is doing it. And it also doesn't mean that those people are also experts at other things or knowledgeable about other things that you might know. It's easy to lump the skills of the world together to kind of this strange aggregate of a person or a prototype of a developer online. And that's just not realistic. So that leads me into my next point, which is you should recognize that all great developers have gaps. There was this fantastic blog post that I just highly respect Dan Abramoff for putting out. I think the rest of the world did too. It's called Things I Don't Know As of 2018. I'll put a link in the description where he's this prominent figure, if you don't know him, that gets his skills get over exaggerated quite a bit, which he himself admits and is kind of trying to fight against. I don't know if fight's the right word, but the point of the article was for him to come out and say that he's in a pretty good position where most people think that he knows a lot more stuff than he does. And he goes through and he writes all of the common things that a lot of people do know or that assume that he knows and the things that he just doesn't know at all or know anything about and reveals his weaknesses there. I really think the world can use a lot more of that. It's really hard to put yourself out there sometimes as a developer and reveal your weaknesses, especially to more junior developers. And especially when you're an influencer or a content creator or something like that, because you feel like it erodes the confidence in you. Now, I'm not some great developer, but I have been a senior and a lead and a mentor. So I have seen people assume that I know a lot more than I do. So I have some experience there. This is kind of the reason that I leave mistakes that I make in my coding during my videos, as long as they don't waste too much of the user's time that is because I think it's good to show that programming is just full of making mistakes every day. I would say no matter how good you are, but I'm sure that there's some developers that maybe don't make that many mistakes, but I think they're probably pretty rare. Sometimes you're making mistakes all day. But in tutorials, we hide that and it creates this illusion. I'm not saying that content creators are all nefariously hiding their mistakes. They honestly might be doing it to save time and give people what they came there for. But I know that if I'm reluctant to show my mistakes to the world, so are others. And something that's kind of interesting is that the more experienced you are, the better you are at talking to your strengths and avoiding your weaknesses. So all of that is to say, don't take the image or possibly illusion that experienced developers constantly put out there as the entire truth. We are making a lot of mistakes behind the scenes. We've made a lot to get to this point, and we're still making that many. And to me, that's kind of the fun of programming, to be honest. I'm sure there's plenty of other fields are like that, but it's a meter stick. It's a way to show that you're constantly growing. If you're not making mistakes, then you're not learning new things. And that's also to say on the last topic that we can also see that people are pretty quick to judge other people by their weaknesses. So I don't think it's unreasonable that we feel nervous about our weaknesses being exposed because we ourselves might jump the gun on judging someone by some mistakes they're making or some weaknesses they're showing when they're supposed to have a certain skill level. So just keep that in mind. So the next piece of advice I have is to go out of your way to expose your weaknesses. If you're really early in your career, this can be very beneficial for you. And I wish that I had done it. I know it can be very scary, but honestly, experienced developers will be the most forgiving during that time that you are earlier in your career, a junior, whatever title you want to call it. And it's super valuable for you to lay all your cards on the table, and that will cause them to more thoroughly explain things to you. If they don't, then you might be in the wrong place. The worst thing you can do is sit there and nod your head along and pretend like you know what they're talking about. I'm sure that you've done it. I've done it. But it's terrible. Please stop doing it. Because eventually, they're going to see that you don't actually get what they're talking about. And that seems like you're just lying. Most people I have found personally appreciate working with people who are honest about their faults and areas that they lack experience. It makes them respect you more. So I really think you should just take the risk. Just put all your cards on the table and ask questions and just drink up that experience while you can. Like I said, I really wish that I had. It could have propelled me much further in my career much faster. So the next thing that I want to cover is, I suppose, it's a Jimmy Cleveland original. I call it the Anxiety Stack. And it's an actual actionable item, actual actionable, that one's tough. It's something that you can actually act upon should you choose to. So here's how it works. You take all the things that you don't know that you keep hearing about online or at work or whatever that contribute to your imposter syndrome or the anxiety you're feeling. That's why I call it the Anxiety Stack. I like to use Asana for it, but you can use any sort of task manager where you can reorganize, you know, sort of to-dos up and down. That's fine. But let's take an example here. Let's say that you are newer to JavaScript and Closure is really tripping you up. You know that you should know it. You might need to know it for interviews, but you still don't really understand it or you're just not very familiar with it. So you'll put that on the list. And that doesn't mean that you have to get to it right now. You know, you leave it alone. You just put it on there for now. And then you'll hear another term. Let's say it's Jamstack or, you know, a framework that you haven't delved into or anything. It could be anything. So eventually what you're going to do with that stack is once a week is the amount that I like. Sometimes I do two a week. You're going to pop one of those off the stack. And what that means is that you're going to take the item that's the closest to the top, which that's why you want to be able to reorganize it because based on frequency, something might be a little more pressing in your mind or maybe you think it's easier to tackle. But you're going to pop that off the stack. And I like to take a Pomodoro timer. So 25 minutes.

That's worth because I'm big into Pomodoros. And I will just go and read about that thing. And that's it. And very often, that actually completely alleviates my sort of anxiety from hearing that word. And oh, no, I know I should know what that is, but I don't actually. And I'm kind of embarrassed. Obviously, 25 minutes isn't long enough to fully understand most things. For instance, let me give you a good example. So I mentioned closures in JavaScript. What about closure the language? OK, there was once a time where I kept hearing about closure, not cool it is. And I didn't know anything about it, but I felt like I kind of should know. So what I did was I just went through the docs and I built a really quick starter closure app and I loved it and it was really fun. And the thing is, I still haven't gone back to closure and I might someday. But that alone, you know, put that idea in my head of, OK, yeah, when someone says closure, I know what that is like. I don't know a bunch about it, but I get the gist about what it is. And I had a little bit of experience with it. So that's cool. And for me, that alleviates a lot of anxiety. I'm not saying it just all goes away, but it it helps you continually, you know, broaden your skills and your general knowledge. And a nice side effect about this is that you get exposure to the rest of the world that you might not normally get. So I kind of learned some interesting little paradigms from my exposure to closure, and it changes the way that I kind of think about the way that I wrote code every now and then. I have a little interesting idea about it's almost like a little a little seed is born in your mind. And the more exposure you can get to that, the broader your skill set is going to be in the better a big picture you're going to have. Now that I've explained all that, I do have to throw out a disclaimer that I don't think that you should just be hunting or all sorts of information and burn yourself out and get yourself all stressed. You know, maybe this the anxieties tech or whatever you like to call it isn't for you. It's just a tool for me that I it kind of turns the anxiety problem into somewhat of a little bit of a game. And if I keep at it, I always feel better on the other end. So. You do what you will with that information. Now, I actually find it even more helpful if right before you do your timer, if it's a Pomodoro or whatever, you note down somewhere on your little ticket what you knew before you jumped in and how you felt about the subject. Like, I don't know anything about this. I don't even I think it's in this general direction. I think it's a functional programming language. But outside of that, I really don't have a clue. For example, then you write down how you felt after you've completed it. This can kind of just help solidify what you've learned. It's actually particularly useful if you write a blog or something like that, or even if it's just for yourself. That kind of encapsulates what you went over and what you went through. It really helps solidify, you know, it's old homework trick. Right. And this leads me as a segue to my last point here, which keeps me going. Keeping a journal of some sort is highly effective for me at dealing with imposter syndrome in general. So this is kind of hard. I must admit, I'm not always on top of it, but it's really useful if you jot down things that you learn. You know, like I said before on the last item, if you're doing the anxiety stack thing, this can be a nice little launch point for that. If you write before, like what your feelings were in general about just, you know, completely being a noob or being nervous about a thing or whatever it is, and then you write down afterward kind of what you've learned and all that stuff. And if you continually jot these things down over the course of, let's say, six months to a year, I like to look at it around every six months, it will probably surprise you how much you've learned. So to give you like a real quick, just like real world example, there was a point in time where I didn't know what an interface is. And it gave me a lot of anxiety because it got brought up all the time with other smart programmers and I didn't really know how to use it. But now I write them a bunch in TypeScript and in Go, and it's really weird to look back at a time when I didn't know anything about it. And it's kind of funny because when I go back and I read it the first time, I'll be like, oh, really? Yeah, I guess I didn't really know that very well. And I'll start to come back to me. So it's funny how you'll forget these things. And it can feel really good to have that like, oh, yeah, cool. Yeah, I am learning a bunch of stuff, actually. That's sweet. So for me, this is really valuable, because it's just too easy to forget what you didn't know. And I think it's a good humility reminder for myself when I'm explaining things to other people, to just constantly be reminded of how many things I've learned recently and how recently I didn't actually know that much about it. Because we often kind of start to accumulate all this knowledge into ourselves and don't really recall that it was only three or four or five months ago that we really didn't know much about it. It's just kind of become a part of our being or everyday work. So try out keeping a journal and reviewing it every six months to a year or whatever for a little pick me up and a little bit more objective reflection on all the things that you've learned. If you're working on a big project and you write very descriptive commits, this is also a really nice way to go back and look at throughout the project, all the different things that you did and that you learned, by the way. Well, that will about wrap up this video, I think. And I don't really know if it will be that useful to people, but these things have been pretty helpful to me. So I thought I would take the time to just make a video and share them with you. So if they are helpful, I love to hear about it in the comments. And otherwise, I'll hope to see you in the next video. Take care. Bye.