Hello and welcome to Swashbuckling with Code. I'm Jimmy Cleveland and today I want to take you on a little tour of the Github CLI. In particular, I'm going to show you some practical commands that I've been using more and more to speed up my workflow. Many of you might not even know that there is a CLI tool for Github that you can use in your terminal, but many of you probably do know about it and you just haven't really dug into it or just didn't seem super practical to you or use it for a command here and there if you're anything like me. But recently I tasked myself with trying to dig into it a little bit more and incorporate it in my workflow. And I have to say that there's a few commands that I have a hard time living without now. So let's just jump into it, shall we? To get started with Github CLI you're gonna head over to CLI.github.com. I'll put a link in the description and I'm not gonna go through the setup for that. That's not what this video is for, but you can see they have a couple of commands that you can use to install it. Just know that you are gonna probably want to set up an auth token with SSH and go through that whole process of logging in, but it's pretty simple. CLI docs themselves are pretty hit-or-miss, honestly. They do have all the commands listed off on the side, but there's not a great search and sometimes some commands you would think are in one section or another. You have to click around a lot to figure them out and sometimes the output doesn't really show you what you can really do with the command, which I think is what's really missing. Some of them are great. Like I think the PR list one shows the output itself, which I really like just to kind of quickly see, oh, okay, when I input these commands, this is generally how they're used and what I'm gonna get back. But that's why I made this video. I'm gonna show you some practical commands. And then if you get interested in the GitHub CLI, you can dig into the manual itself and see if there's any commands that interest you. Now I'm gonna kick this off with one of my favorite commands that I think really showcases the power of the GitHub CLI and how much it can improve your workflow. And that is the gh repo create command. Now I'm using a snippet here in this clip to showcase the power of it and how fast but just with a few keystrokes, I can create a repo and I can set it to private and I could push it up immediately without having to do the clunky interface that you normally do where you go into the browser and you have to create a new repo and then you copy the lines that you need to do for, you know, a project that you've already started and been working on. But you're just like, okay, now it's a pretty good point to push this up. Super fast, super useful. This is one of the main commands that I like to use all the time. Now you can use the gh repo list command. I only use this just to see that my repo has been created so I don't have to go to the browser. I mean, I'll see that GitHub CLI demo at the top there. And if I don't really know what command to use, you can use help on any subsection or any argument of the gh-cli. So in this case, I'm kind of looking and I see, oh, well, there's an edit command. What does that do? Well, this is actually pretty cool because if I made a repo and let's say it's private and I wanted to switch it to public, I can just go gh repo edit and I can go down to the visibility and then I can just select public and it's done. That one's actually quite a few steps to do in the web UI. Now I told you I was going to show you how I created that snippet and I'm personally using Raycast on the Mac and you can see here. I've got a little snippet that's just gh rc shortcut. And what's cool about it is I have it move my cursor back to where it's supposed to put the name of the repo automatically when I type it in. You of course can use any shortcut tool you like, but in combination with snippets, this is a really powerful tool. Another common workflow for me that I use the GitHub CLI for is when I want to make a new branch and push up for a PR really quickly. So in this instance, like I'm creating a new commit real quick, I've just added a new feature or whatever and I want to make a PR really fast. I can simply type gh pr create and it'll ask me if I want to push up my branch if I haven't already. It then walks you through a little wizard each time, which is actually pretty useful because if you want to change the title or let's say that you want to create the PR as a draft, these are really useful little quick features you can do. You can also open it in the browser real quick if you just rather do it there. Just like that, you've got a PR created automatically. You can use the gh pr view command to look at the PR and see if any checks are running or just any information about the PR in general. I'll show you checks in a moment. But what's really cool then is you can use the gh pr edit to go back and edit your command so you don't have to go into the browser to do that either. In this case, I'm using it to add some reviewers to a PR that I've already created. And you'll see now when I use the gh pr view command, it shows those reviewers as part of the information for that pull request. Another handy pull request command is gh pr list and this lists out all of the pull requests for your project, which is super handy. There's also an alias gh pr ls for it. And once you've listed all those out, they all have the numbers so you can use gh pr view and then pass it a number to look at any pull requests, not just the one that's the branch that you're on. Now this next one is one of my favorites because it merges a bunch of really common commands into one and that's gh pr merge. And so what this will do is ask you how you want to merge the current branch that you're on and it will default into the the main branch that you're using. It will then prompt you if you want to delete the branch both locally and on GitHub, which keeps your repository nice and clean. And then it merges it in, it checks out the main branch for you, and then it also pulls down the main branch with the updates. So this is a common operation that I just always want to do is, you know, usually I go into the browser and I merge it and then in my terminal I go and I check out main and I pull down and it just does all these things in one nice little command and that's why it's one of my favorites. You can also use the pr merge command on branches that you don't have checked out. So if you do gh pr list or ls, you can list out all of the PRs and then you can just pick the number, so gh pr merge the number, and you can merge a different one if you like to. Now what's cool about this is it's not going to let you merge if there's conflicts or if the checks aren't completed or anything like that. So you don't have to worry about that problem. So let's say that I went to merge this PR and it wouldn't let me. And unfortunately, it doesn't give you that many details if you don't check it out. So I'll gh pr checkout the number, which is another handy little one. And then from there what I can do is I can run merge again on the branch that I'm on and it'll give me a little more information on what's wrong with it. It might be checks or it might have a conflict and it, in this case, it gives me actual command that I can use to run to pull down it locally and resolve those conflicts. So here I'm just demoing a common workflow for me that the GitHub CLI has sped up significantly. And you can see when I try to merge this again, I haven't pushed up my changes and it gives me some additional information that the branches have diverged. So that's pretty cool. And once your conflict is resolved, you push it up, you run the lovely merge command, and it does all the automation of checking out your main branch and pulling down and all that good stuff. And just to show you that I'm going to do a git log here. And you can see here that we have all the commits that we just recently did into the main branch. Another really handy command that's similar to pr list is the pr status command. What I like about this one is it kind of gives you the list of the PRs that affect you. So it will show you the current branches PR that you're on. It will show you all PRs created by you, and it will show you any that are requesting a code review from you. I've only recently been incorporating this one in my workflow, but I have found it to be quite helpful and I'm starting to use it more and more. I don't typically just kind of run it over and over to see if there's anything waiting for me. My kind of workflow is that I have the GitHub app on my phone, and when I get a notification, I can just glance at it real quick. And instead of picking up my phone and looking at it at all, I just know that it's likely to be a PR and I can just tab over to the terminal, run that command real quick and see if there's anything waiting for me. The next thing I want to show with pull requests is how the CLI tool can be useful for workflows, like your tests, you know, Linton test or any continuous integration actions that you're running. So here I'm making a commit that's purposely going to fail our tests and creating a PR for that real quick, just to fire off that continuous integration. And I just kind of showcase here that you can also add a body real quick, and you can switch the CLI to use the editor of your choice. It starts off with nano, but you can use vim or emacs or whatever you like. But what happens when I submit this PR, which is still awesome and super fast, if I go to list it, if I list it too fast, it's not going to actually update with the workflows because it hasn't finished starting all that up just yet. So if you wait a moment, though, you can use gh PR views, the one that I normally use, and you can see that it says checks pending, you can also list out your workflows, but I haven't really found that to be super useful for me. Maybe y'all will find something cool. But I usually just stick to gh PR view. And where this is useful is mostly just multitasking. Like I can just fire that up. And I can be like, okay, the checks are pending. Let me go and do some additional work or whatever I was doing in another tab. And then I can come back and I can just check that real quick. And I'm like, Oh, no, all my checks are failing. And you can also see here if we use gh PR status, it will show our failing checks for branches that we might not even be on just any PR that we've created. So if you end up moving over to a new branch and working, that's a great command just to see like, oh, shoot, my other branch that I just created, it's failing. Gosh, darn it. Of course, once you fix that locally and push it up, all of your workflows will run again. And you could just use the gh PR view command again. And this time you should see that all of your workflow checks are passing. And as I mentioned previously, if you try to merge something that the status checks to workflow checks are not passing, well, then it will just not allow you to. So it of course does obey the rules of your repo. Another really handy set of commands from the CLI for me personally are the gist commands. This just actually makes just a lot more useful to me, because I can just create them on the fly. In this case, I'm just kind of showing that I can point it to a file that I just want to upload because I'm like, oh, this is a good example of how to do a thing that I'll probably forget how to do in the near future. And just with this command, you can hurry up and create a gist. You can also use gh gist list to list out all of your gists, gist list. And then that allows you to run the gh gist view command with an ID of the gist. There might be a more handy way to do it, but that's just usually how I do it. Now it will print that gist out into your terminal. So you can do some fun stuff from there, like pipe it into some sort of syntax highlighter. In this case, I'm just using NPX because I don't have it locally installed just to show the power of it that you can do just on the fly. But what it's really handy for for me is actually sending it into a file. Now this is of course on Nix based systems. You'd have to figure out how to do it on Windows, but I can just, you know, since it's downloading that and printing it out into the terminal, I can just send it into a file. And the only problem that I have with that is that it also kind of prints the description into the file. So I just have to go in and delete that description real quick. Another handy way to do this is the gist clone command. And the one thing that I don't like about this command is that it makes you create a directory, which is just kind of weird. I usually don't want that. I just want to put all the files in one thing, but I haven't figured out how to do that yet. But it's still really nice. It doesn't have that previous problem of, you know, inputting the description into the file. And if you have, you know, multiple files that you want to dump in just one relegated area, well, it works pretty well. You can of course pick the flavor that you like. Now I'm going to round this video off with a command that is actually not that practical, not one that I use very often, but it shows some of the power if you're kind of an automation nut or you are putting together some programs that are using the GitHub CLI under the hood. So you can use the gh search repos command and you can pass it tags or names or anything like that, that you want to do to search for certain types of repos. Now, in this case, I'm showing there's this AWS shell repo that I found at the top of the list here. Now that's a pretty simple command. It's not that useful. In general, you can use a repo view to take a look at that repo and it will show you the readme, which sometimes is really nice. If you're just looking for a command real quick, I could see some practical use for that. But what's really cool is that you can actually take the output and turn it into JSON and you can use a comma separated list to pick the properties that you want to put in JSON. So in this case, I want to know the watchers. I want to know the created at date. I want to know the updated at date, et cetera. And maybe I'm going to do some sorting or something like that. Again, not something I'm trying to pass off as super practical that you're going to use. I just think it's pretty cool to see that there is a lot of power and probably some really neat things that you can do with this command line. That's all I've got for you today. Hopefully this has interested you in taking a further look at the GitHub CLI and seeing if it's useful in your workflow. Maybe it is, maybe it's not. Go ahead and tell me in the comments if you've got any cool little tips that you like to use it for. But with that, thanks for watching and I hope to see you in the next one.