{"summary": "In this video, I demonstrated how to use git bisect, a powerful command that helps to quickly locate errors in a code base, especially when dealing with tricky bugs that are difficult to track down. I used an invoice printer example, inspired by Martin Fowler's book \"Refactoring,\" and a test suite to ensure the code works correctly.\n\nI began by running the test suite, which showed a failure due to an incorrect calculation. To find the commit that introduced the bug, I started the git bisect process by running `git bisect start`, specifying the bad commit with `git bisect bad`, and the good commit with `git bisect good <commit-hash>`. The bisect session then placed me on a commit halfway between the good and bad commits. I ran the test suite to determine if the commit was good or bad, marking it with either `git bisect good` or `git bisect bad`. Git bisect then moved me to another commit, and I repeated the process until I found the commit that introduced the bug.\n\nI also demonstrated how to use git bisect with npm test, which can help automate the process even further. In situations where there are no tests in the project, you can write a test that checks for the expected output at the current position on master, then run git bisect with npm test to find the commit that introduced the bug.\n\nOverall, git bisect is a powerful tool in a web developer's toolkit, saving time and effort in the debugging process while quickly and efficiently locating the origin of bugs in web development projects.", "title": "Using git bisect to quickly find the origin of a bug", "url": "https://www.youtube.com/watch?v=aulaZBVS16g"}