

Welcome to another exciting episode of Swashbuckling with Code. I'm Jimmy Cleveland, and today we're going to talk about some terminal commands, which I have found to be simple, yet underused in my personal experience. So a quick disclaimer about that. Half of these are bash commands, and the other half of these come from omizsh. So while I was making this video, I actually thought a few of those were just zsh or zsh if you prefer. And it turned out while I was testing them out and trying to figure out where each one comes from, most of them were either straight up bash or straight up omizsh. So it's just become a normal part of my workflow to install it on my machine. I don't really notice any of the performance hits that some people gripe about on my machine personally. And I'm too lazy to go and pick them out myself. So if you are not familiar with omizsh, or you just haven't used it, perhaps these will give you a nice intro to some of its features. And if you do not like omizsh, well, then you can totally set up aliases, or a couple of them are just functions, really simple ones that you could probably look up on Stack Overflow, if you think any of the ideas are interesting. So without further ado. Now I'm going to kick this off with the ctrl r command, let me show you it and let me tell you why. So the ctrl r command goes into recall mode. And what that'll do is search your history. So if I were looking for, let's say a curl command that I ran recently, you can see that I can press ctrl r repeatedly to search through them. Now you might say, well, what is the point of that? Because I can just type curl and then press up and go through them, right? That makes perfect sense. I myself did not know this until I don't know, like a year or two ago. And I commonly run into people that that don't know it. And that's why I'm listing it here. So the purpose of this is that when you use ctrl r, you can actually search any position in that. So you can do just search for swappy. Because if you were to type, you know, swappy here and press up, it's not going to do anything for you. So if you type swappy here, it'll actually find all the things related to that command, you know, you catted it out, or you open it in code, or whatever that is. And let's say that you just happen to know, like, the file name, obviously, like, in this case, planet, you know, it's still going to give it to you no matter what. Now, it's not fuzzy. So you can't do like sw p, it's just going to break there. That's the only kind of downside to it. But overall, an extremely useful command. Next up is the directory stack. So you can use the directory stack to navigate kind of like an array indexing of your history of places that you've been. So you can press one to go back to the last position that you're in or two to go to back zero is your current position. That's why it doesn't do anything. So if I were to say, you know, I want to go up one here, and then go up here again, and then let's say, you know, I wanted to go into this new folder. And a really particular common use case for this is let's say I'm going back and forth between two folders that have very different directory structures for whatever reason. This is pretty useful for me to just press one, and it'll put me back to that, you know, root folder that I was just in, and I press one again, and they'll take me right back. So I just keep jumping back and forth with one. And I actually only use up to two max, because my brain isn't big enough for the rest. But you can go all the way up to nine or, or whatever you like. Speaking of the directory stack, the next one we're going to show is the D command. So that actually shows you the directory stack in ZSH. And this is the only time that I use any of the other numbers. So it's kind of nice if I just want to say, Oh, yeah, like I wanted to go to six here. And it'll take me right on to that pointless folder, which is pretty sweet. bash has the directory stack, but I think you actually have to set up pushing and popping with some commands for that. I'm not positive on that. But what this replaces is the dirs-v command, if you're interested in setting that up yourself. Now, if you're changing around directories, you may not know that ZSH actually allows you to do multiple at once. So I'm going to show that one real quick. So if I were to say go into this, you know, those, you know, trace folder structure here, and I can do cd dot dot, obviously to go up one, but if I press another dot, it's going to go up to and then for each dot, it will go up one. So this will take me all the way back up to the top. And if I were to go back into this directory stack, I would actually have to do the directory structure again, you can even shorten that a little bit more by just typing dot dot dot. I suppose this one's pretty debatable, but I've seen enough people not use it that I'm going to list it here. So there is this handy ll command that you can press. And what that will do is list out all of your directories in the well, let's let's show it. So you can do dash ls dash lh. And that's the flags that it's adding to it. So the important part about that is if you started with ls, you're just going to get this, you know, inline format, which is sometimes hard to read when there's a ton of them, there's a lot of them, but it's not a big deal. And then you can just type in the name of the directory. So if you're using a directory, you can just type in the name of the directory. And then you can just type in the name of the directory. So if you're using a directory, there, so you can do ls dash l. And that will, you know, list them out in this long list format is what it's called. And then you can do ls dash h. And what that will do, I guess you have to pair it with l don't you? Silly. In that format, it's actually going to the H stands for human readable. So it takes all these file sizes and puts them into, you know, K or B or megabytes or all that type of stuff. So that is what the ll command is just wrapped up doing for you. And that's pretty much the only one I use nowadays, unless you want to do ls dash la h, in case you need to look at hidden directories, that's the only other time I don't use it. Now, this one covers a boatload of use cases, it is so helpful. So the one I'm going over now is going to be command, and then piping that to grep. So what we can do for that to show an example, is let's say that you were trying to curl google.com. And you get this, oh, three, one moved. And you're like, Oh, yeah, I need to follow that, right? Like, maybe you just don't use curl that often, or whatever. And you try to do dash l to follow it. And you do google.com or google.com, whatever you want to type. And it doesn't do anything, right? And you're like, Oh, what was that? And you could curl dash dash help, right? And then you could like scroll up through this and try to find it in here. But you know what, let's be lazy and actually just do curl dash dash help pipe that to our handy grep. And let's say I know it's something to do with redirect. Boom. Oh, yeah, it was an uppercase dash l. That's pretty cool, right? This is useful for so many other things, pretty much any, you know, output command, you can just pipe right away to grep. And if you, you know, aren't familiar with grep, this is a great introduction to using it, you can just use it exactly how I showed. But going into it further than this is out of the scope of this video, unfortunately, so I'm sorry about that. If you ever find yourself making a bunch of directories and constantly having to change into them and make more directories, you know, let's say a common thing that you see is someone saying, Okay, I want to make this directory one. And then I'm going to cd into one. And then I'm going to make this directory two. And then you might, you know, even just make now that you've made two, you can make two slash three. And then you know, you cd into two slash three. And that is obviously a bunch of nonsense. And we'll show you a way to kind of get around that. So let's actually cd. Let's get out of here and remove those real quick. So we can do that again. So now what you can do is you can use make dir and then pass the dash p flag because well, let me actually show you so if you try to make one, two, because you don't know, you can't do that, because it needs to build upon the previous one. So you need to pass the dash p flag. And that will allow you to make one, two, and three. Building on the mkdir or make dir dash p flag, if you in the previous example, we showed that you wanted to cd into those directories in between or after. So what you can actually do is say I want to make 123 that nested folder structure, and then you can do the and and operation. So if that was successful, continue on and cd into dollar underscore, and boom, you're in the in that directory. Now I'm not actually knowledgeable enough to know what this means. I believe it has something to do with using the last argument and then using it with the current command that you're running. That's as much as I know. What you can also do is a little bit of a shorthand on top of that was the sh where you can do MD and then now we can say, you know, four, five, etc. And then you still have to pipe this, you know, cd dollar underscore into it, but the MD makes it a tiny bit shorter. If you want to skip that dash p, part or make typing that whole thing out. And furthermore, let's say we go back up, we're going way up here. And then we want to RMR of that directory structure. If you are in oh, my zsh, or using utilizing that you can just use the take command. So now you can say take 123. And there it is. It's nice and concise. It made the mkdir p and edit that and and on afterward, took you right into that directory. If you, you know, think that oh, my zsh is a little bit too bloated for your tastes. And that's cool. I'm sure there's a nifty way that you can look up just implementing this if you want an alias or you can do the previous way that I just showed you. Well, that wraps up our list. Hopefully it was short and sweet. And if you'd like to see more of this type of content, or any other type, just let me know down in the comments and I'll see you next time.