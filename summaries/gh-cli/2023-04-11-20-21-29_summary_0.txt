PROMPT:

The following is a transcription of a video for web developers called 'Streamline your repo workflow with Github CLI'. Write a detailed summary of the video, providing an account of the steps taken and topics covered. Use the first person point of view, using 'I' instead of referring to the speaker as 'the host' or 'the speaker'.

---
TRANSCRIPTION:

Hello and welcome to Swashbuckling with Code. I'm Jimmy Cleveland and today I want to take you on a little tour of the Github CLI. In particular, I'm going to show you some practical commands that I've been using more and more to speed up my workflow. Many of you might not even know that there is a CLI tool for Github that you can use in your terminal, but many of you probably do know about it and you just haven't really dug into it or just didn't seem super practical to you or use it for a command here and there if you're anything like me. But recently I tasked myself with trying to dig into it a little bit more and incorporate it in my workflow. And I have to say that there's a few commands that I have a hard time living without now. So let's just jump into it, shall we? To get started with Github CLI you're gonna head over to CLI.github.com. I'll put a link in the description and I'm not gonna go through the setup for that. That's not what this video is for, but you can see they have a couple of commands that you can use to install it. Just know that you are gonna probably want to set up an auth token with SSH and go through that whole process of logging in, but it's pretty simple. CLI docs themselves are pretty hit-or-miss, honestly. They do have all the commands listed off on the side, but there's not a great search and sometimes some commands you would think are in one section or another. You have to click around a lot to figure them out and sometimes the output doesn't really show you what you can really do with the command, which I think is what's really missing. Some of them are great. Like I think the PR list one shows the output itself, which I really like just to kind of quickly see, oh, okay, when I input these commands, this is generally how they're used and what I'm gonna get back. But that's why I made this video. I'm gonna show you some practical commands. And then if you get interested in the GitHub CLI, you can dig into the manual itself and see if there's any commands that interest you. Now I'm gonna kick this off with one of my favorite commands that I think really showcases the power of the GitHub CLI and how much it can improve your workflow. And that is the gh repo create command. Now I'm using a snippet here in this clip to showcase the power of it and how fast but just with a few keystrokes, I can create a repo and I can set it to private and I could push it up immediately without having to do the clunky interface that you normally do where you go into the browser and you have to create a new repo and then you copy the lines that you need to do for, you know, a project that you've already started and been working on. But you're just like, okay, now it's a pretty good point to push this up. Super fast, super useful. This is one of the main commands that I like to use all the time. Now you can use the gh repo list command. I only use this just to see that my repo has been created so I don't have to go to the browser. I mean, I'll see that GitHub CLI demo at the top there. And if I don't really know what command to use, you can use help on any subsection or any argument of the gh-cli. So in this case, I'm kind of looking and I see, oh, well, there's an edit command. What does that do? Well, this is actually pretty cool because if I made a repo and let's say it's private and I wanted to switch it to public, I can just go gh repo edit and I can go down to the visibility and then I can just select public and it's done. That one's actually quite a few steps to do in the web UI. Now I told you I was going to show you how I created that snippet and I'm personally using Raycast on the Mac and you can see here. I've got a little snippet that's just gh rc shortcut. And what's cool about it is I have it move my cursor back to where it's supposed to put the name of the repo automatically when I type it in. You of course can use any shortcut tool you like, but in combination with snippets, this is a really powerful tool. Another common workflow for me that I use the GitHub CLI for is when I want to make a new branch and push up for a PR really quickly. So in this instance, like I'm creating a new commit real quick, I've just added a new feature or whatever and I want to make a PR really fast. I can simply type gh pr create and it'll ask me if I want to push up my branch if I haven't already. It then walks you through a little wizard each time, which is actually pretty useful because if you want to change the title or let's say that you want to create the PR as a draft, these are really useful little quick features you can do. You can also open it in the browser real quick if you just rather do it there. Just like that, you've got a PR created automatically. You can use the gh pr view command to look at the PR and see if any checks are running or just any information about the PR in general. I'll show you checks in a moment. But what's really cool then is you can use the gh pr edit to go back and edit your command so you don't have to go into the browser to do that either. In this case, I'm using it to add some reviewers to a PR that I've already created. And you'll see now when I use the gh pr view command, it shows those reviewers as part of the information for that pull request. Another handy pull request command is gh pr list and this lists out all of the pull requests for your project, which is super handy. There's also an alias gh pr ls for it. And once you've listed all those out, they all have the numbers so you can use gh pr view and then pass it a number to look at any pull requests, not just the one that's the branch that you're on. Now this next one is one of my favorites because it merges a bunch of really common commands into one and that's gh pr merge. And so what this will do is ask you how you want to merge the current branch that you're on and it will default into the the main branch that you're using. It will then prompt you if you want to delete the branch both locally and on GitHub, which keeps your repository nice and clean. And then it merges it in, it checks out the main branch for you, and then it also pulls down the main branch with the updates. So this is a common operation that I just always want to do is, you know, usually I go into the browser and I merge it and then in my terminal I go and I check out main and I pull down and it just does all these things in one nice little command and that's why it's one of my favorites. You can also use the pr merge command on branches that you don't have checked out. So if you do gh pr list or ls, you can list out all of the PRs and then you can just pick the number, so gh pr merge the number, and you can merge a different one if you like to. Now what's cool about this is it's not going to let you merge if there's conflicts or if the checks aren't completed or anything like that. So you don't have to worry about that problem. So let's say that I went to merge this PR and it wouldn't let me. And unfortunately, it doesn't give you that many details if you don't check it out. So I'll gh pr checkout the number, which is another handy little one. And then from there what I can do is I can run merge again on the branch that I'm on and it'll give me a little more information on what's wrong with it. It might be checks or it might have a conflict and it, in this case, it gives me actual command that I can use to run to pull down it locally and resolve those conflicts. So here I'm just demoing a common workflow for me that the GitHub CLI has sped up significantly. And you can see when I try to merge this again, I haven't pushed up my changes and it gives me some additional information that the branches have diverged. So that's pretty cool. And once your conflict is resolved, you push it up, you run the lovely merge command, and it does all the automation of checking out your main branch and pulling down and all that good stuff. And just to show you that I'm going to do a git log here. And you can see here that we have all the commits that we just recently did into the main branch. Another really handy command that's similar to pr list is the pr status command. What I like about this one is it kind of gives you the list of the PRs

(END OF TRANSCRIPTION)

---

SUMMARY 0:

In this video, I demonstrated how to use the Github CLI to streamline my repo workflow. I began by introducing the Github CLI and explaining its benefits, as well as providing a link to the CLI installation process. Once installed, I showcased various practical commands that have improved my workflow, such as creating a new repository, listing repositories, and editing repo visibility.

I then shared how I use snippets in conjunction with the Github CLI for an even more efficient workflow. Using tools like Raycast, I can quickly create and edit repos without needing to navigate through the web UI.

Next, I demonstrated how to use the Github CLI for creating and managing pull requests. The commands I covered include creating a new PR, viewing PR details, editing PRs, listing all PRs, and merging PRs. I also showed how to check out PRs and resolve conflicts using the Github CLI.

Finally, I discussed the PR status command, which provides a quick overview of all PRs in the repository.

In summary, the Github CLI has significantly improved and sped up my repo workflow by allowing me to perform common tasks directly from the command line. By utilizing practical commands and integrating snippets, I can efficiently create and manage repositories, pull requests, and more.