[{"text": "Hello, welcome to Swashbuckling with Code. I'm Jimmy Cleveland and in this video I want to talk to you about why I think the vast majority of you should not be learning Webpack in 2023 and what some battle-tested alternatives are that you should be looking into and that I'm going to be doing some videos on shortly as well. This is kind of a funny video for me to do because my Webpack series has actually consistently remained my most watched videos. And while I think that having some Webpack knowledge can really help your fundamentals in this world of bundling and transpiling and all that good JS stuff, I just don't think it's worth it for most developers with all the great alternatives out there now. Why I say most developers though when I say you shouldn't be learning Webpack in 2023 is because Webpack still remains a very flexible and customizable tool and there's a lot of frameworks and tooling out there that's built on it because of that flexibility. And you might also be in a work environment where your company is using Webpack or an older application that you're using is built on Webpack and you don't have the bandwidth to transfer it over to something newer. There's just a few niche scenarios where Webpack might make sense for you. But if you're starting a newer project now or you're just newer to web development in general and you're trying to get your head around all this transpiling, bundling nonsense, I just think there's some really nice lean tools, super fast, work pretty much out of the box that you can just dive into and get going. Because in the end you should just be making apps, right? So enough preamble, let's just dive into the build tools that I think that you should be learning in 2023. And that's build tools, plural, because you can just learn one of these, but I'm going to give you a few options for various different scenarios or personal preferences of developers that I think should cover the vast majority of use cases. And I'm going to have timestamps for each of these. So if you just want to look at one in particular and then bounce, that's totally cool. And keep in mind that I am going to be making some videos that get into some more depth on how to actually use these instead of just covering the highlights of what they have and what they offer. So if you're into that, you know, subscribe, hit the notification bell, whatever, you know, you do you. Okay, so as to not waste any more of your time, I'm going to start with the best one, the one that I think that most of you should be looking into, and that is Vite. Now I actually feel like this might be the favorite right now. But that just might be my social circles. And the main reasons are that it's super fast, it just works right out of the box. And you'll actually notice that quite a few of the tools in the ecosystem are starting to be built on this, including Astro if you're familiar with that. So what's really great about Vite is their documentation just really modern and fresh. And it just focuses on getting you going right at the beginning. And I love that you can dig into more details if you want to about their methodology and why they do the things they do. And that's also awesome. They give you some simple commands that you can run like npm create Vite, or you can use yarn or pnpm or whatever you name your app, and then you can provide a template or you could just leave that off. And then the CLI is going to walk you through this sort of wizard experience of asking you what JavaScript framework you want. They support vanilla JS, React, Vue, Svelte, all the good ones. And when you select each one, they also have a TypeScript option for each. And it's really cool. Once you hit it, it sets up your project with a little boilerplate. A quick note about the TypeScript though, that Vite uses, they do use ES build under the hood in development to transpile TypeScript, which actually doesn't do type checking on each build because it's way faster not to. And this is okay for a lot of you because your IDE is probably going to let you know about most of the TS errors. But if you want that actual type checking on your build process, you're going to have to set that up yourself in your own build process, or your CI or whatever you want to do with that. Just know that one of the interesting things about Vite that makes the developer experience so fast is that they don't actually bundle all of your code. Each time you make a save or change, they use native ES modules with hot module replacement for a faster cycle time. So you could of course just set up your own project with just native ES modules and import them into the browser and that'd be fine. But Vite adds some really cool tooling on top of that, including the hot module replacement. And if you're not familiar with that term, you might be familiar with hot reloading. And it's similar except it doesn't reload the page, it actually just kind of ejects the module so that when you save if you're like in the middle of filling out a form, and then you change something, the form will still be filled out, it doesn't actually fully refresh the page, it'll do the same thing with CSS, where you don't have to keep refreshing and get to your current state, it's just a lot faster development time. Now I mentioned that it uses ES build under the hood for development time to improve page load speed. But Vite also uses rollup under the hood for production builds. And that's really interesting. The reason they do that is because ES build actually is lacking in some functionality for code splitting, CSS splitting, such like that, which means that if you use ES build for the production build, your apps aren't going to be quite as performant in some situations as they would be if you use a real powerful tool like rollup that's just built with that feature set in mind tree shaking code splitting to the maximum all that good stuff. If you aren't familiar with all those terms, that's perfectly fine. You're probably going to pick them up as you go. Or you can check out my future videos, I'm going to be referencing them as I dig into each one. But it essentially really just equates to a better performant experience for your users when you're building apps. Another quick little cool thing about using rollup under the hood for production builds is that it can lean on the plugin ecosystem of rollup, which is super mature. And that means that if there's something that you can't customize with Vite, which is pretty well customizable, honestly, there's a bunch of rollup plugins that have kind of been ported over modified. So they work well with Vite, there's a whole list of them. And you can just grab one of those and do it pretty similar to a rollup config. Now I did mention that Vite uses ES modules, which some browsers, some legacy browsers might not support, well, they actually have an official plugin that they support in order to use it with legacy browsers, which sounds pretty cool. But I have never tried that. So I can't vouch for it. But it's there if you want to check it out. One of my favorite things about Vite that you get right out of the box is it's very similar to Parcel if you've ever used it where if you just provide a certain file type that it can handle or a certain configuration file, it's just going to automatically detect that without any setup required from you. So for example, if you add a post CSS config, it's just going to work. If you want sass or less or stylus or any of those, you do have to install the packages. But once you do and create the sass file, for example, you could just import that in your regular JavaScript code, and it's just going to load up and work just right. They've also got CSS module support built in, which I like to use whenever I'm kind of building something really lean. And they've also got great image support, static assets, SVGs, all that type of stuff, you just import them and it does all the work for you of turning it into a hash and your final bundle. You know, every time the file changes or whatever, you just import it and it'll make all connect all the dots for you, so to speak. And all of that comes pre-configured for you as soon as you pick the template for the framework that you want. So in summary, I think that Vite is probably the number one choice this year for the build tool that I think you should start with if you're looking to just quickly create a project and get going and have awesome fast cycle time. All right, if you're still here after that one, my next pick is going to be ES build. And why would you pick this over Vite? Well, particularly, I think that you should first start off knowing that Vite does use ES build under the hood for development at least. And that's what makes it so freaking fast. But if you want to use ES build itself, what you're going", "title": "Don't learn Webpack in 2023: A dive into 3 alternatives", "url": "https://www.youtube.com/watch?v=RAvdPTkVpCE"}, {"text": "want to use ES build itself, what you're going to get out of that is kind of some lower level customization and leaner toolset. So if you're the type of developer that wants it as minimal as possible, and you don't mind doing a little bit of extra work to set some things up, this might be the tool for you. So with ES build, when you're starting out, you can just run an NPX ES build commander the like, and you give it your in file and your out file. And it's just going to bundle that up for you with some defaults and essentially have something that you can load up in an HTML file and it'll work. There is a configuration option built in, but it's a little bit weird. I would say that's one of the weird things about ES build is it doesn't feel quite as idiomatic for lack of better term, as normal in the JS ecosystem. It's just not very typical to how most JS build tools work. So you might just have to get used to that. But it is pretty simple to get an app up and running. And it's really fast. It's written with go under the hood. And that's the main reason for the speed, of course. But some of the downsides to ES builder doesn't come with a dev server or anything like that. You have to create your own HTML file and all that good stuff. It doesn't come with any of that out of the box like Vite would. It also seems to be pretty focused on either vanilla JavaScript or react with JSX. Most of the docs are covering only that I know that there are some plugins out there for view and spelt and such. And of course, Vite uses it under the hood. But this is another thing you want to know going in. Even if you're not really interested in ES build as a main tool, it might be worth just going through the getting started documentation. It's only going to take you 1520 minutes probably to get a react app up and running with pretty much no configuration. It's pretty awesome. You just create your standard react, react DOM or server client file, your index file, then you're going to make like an app file. In this example, I'm doing one from the react docs that just has a little counter and it's just going to automatically detect the JSX and set that all up for you and output the bundle correctly. Then you just create your own HTML file, you throw a little script tag pointing to that and bada bing bada boom, you've got a react app up and running. I think if you're making just a really simple app, this is a pretty good tool to have in your belt. But if you do need a lot of customization, be prepared to dig into the docs and really learn some stuff. Because personally, for me, it just wasn't the most intuitive tool to learn for quite a bit of use cases. Now I have to finalize with this point because it's going to segue into my next one. One problem that I really have with ES build is it doesn't seem very well built for libraries, even though they do mention that I'm someone who spent a lot of time on build tooling. So I wouldn't say that I'm like an expert, you know, it's not like I've built these tools myself. But if I'm struggling to make code splitting work out of the box on different routes on next JS, for example, just trying to drop my library that I created in ES build into it like I would any other package. Well, if I'm struggling with all that, then probably a lot of developers are going to, I feel like a lot of people think they're getting all those proper benefits out of the box with the s build and actually aren't. So really just do some testing. One of the tests that I do is when I make a package with it, you know, let's say I'll publish it or use relative installs or whatever. But let's say you publish a package, then I'll just spin up a brand new next JS server, for example, since it's a really popular tool. So of course, your library should work for it if it's a react library, and I'll install it. And then what I'll do is I'll import one module on one page and one module on another. And I'll see if that code actually got split between the two. So it only loads on the page that it's used. And then there's something that just did not work with a lot of configuration options from me using ES build. But if you're not doing any of that, and you're not worried about creating a library package for other people to use, or you just don't really need that much code splitting or whatever you just it's pretty lean, and I think he has built a pretty awesome tool. All right, now here's my third alternative that I think is one of the major build tools you should consider in 2023. And this one, particularly if you are creating a JavaScript library, that build tool is roll up real quick note before I dig into roll up, I should probably explain the difference between an app and the library briefly, those are the two main terms that you're going to run into. And an app is essentially what it sounds like it's like a website or an application that you're using JavaScript to create and host and you know, running the client or server side render or all those good things. But a library is different because that's something you're intending to be reused by other apps or websites or other users. Okay, those are very different concerns. Now you definitely can create apps in roll up, and people do. But for me, it's not the tool I would reach for. I think where it really shines is libraries. This is the only tool that I can consistently get maximum performance out of my libraries. I mean, all of the tree shaking code splitting goodness that you're looking for. I do a lot of design system work over the last few years. And so roll up is a really handy tool in my tool belt, because it's the only one that I can get all of the optimal performance out of of all the tools that I've tried it. It's the one that handles the the full optimal tree shaking, which isn't so hard. Most of the other ones have figured that out, but mostly the code splitting. So if you want a really solid tool to learn, because you're making a bunch of library apps, and you want them to be optimal, I really think you should look at roll up. Now be warned that roll up is much like a web pack, and that it is a beast, it takes a bit to learn, I would say it's one of the least intuitive ones to pick up and just get going. I do plan on making a roll up video in the near future, especially if there's some interest. So leave me some comments if you are into that. And if you're eagerly awaiting it, of course, you can subscribe and hit the notification bell and all that goodness if that's your thing. But there is a lot to cover with that video. And I want to make sure that I do a good job of it to kind of give you a peek into what you'd be getting into with roll up for your standard TypeScript react setup, you're just going to need to install a few packages, create a roll up config file that utilizes those packages, they cover some of these pretty well in the docs, but some of them you need to go to the individual packages to figure out. Like I said, you kind of have to piece this knowledge together by looking at general tutorials or how other packages are built. I do really wish that the docs kind of gave you more templates are more informative about that. But once you get those basic things set up, you just run your roll up command with a dash C to point to the config and you're off to the races. What's really awesome about roll up though, is that the plugin ecosystem is immense. Turns out there are a lot of challenges to tackle in this modern JS ecosystem. Even just for react, there needs to be like common JS plugins in order to take it from that and turn it into ESM so that you can have all your tree shaking code splitting goodness. There's a bunch of other stuff we won't get into it right now. That'll be in the future video. But just know there's probably a tool out there for most of your use cases. Now those are the three main build tools that I would pick at start with and use as my everyday drivers, each with its own specific type of project that it excels at. If you aren't sure what to choose, I really recommend just starting with Vite. I think you're going to continue to see it just keep growing and growing in popularity. It's really been slicing through those turbulent waters recently and emerging on top. But those build tools are not the only game in town. Those are just the ones that I use that I like and that I can recommend. Some other honorable mentions are Parcel 2, Roam, SWC, and even TurboPack, which the Vercel team is working on and is super promising replacement for Webpack coming up. In the end, just pick one. Don't", "title": "Don't learn Webpack in 2023: A dive into 3 alternatives", "url": "https://www.youtube.com/watch?v=RAvdPTkVpCE"}, {"text": "up. In the end, just pick one. Don't worry about decision paralysis. Just get going and build things though. That's my advice to you. The competition is great and you should embrace it because while it can be a little bit overwhelming to constantly have new build tools flying here and there, the whole ecosystem is just getting better and better from all that competition. But really just try Vite out. You're probably going to love it. My final note on this video is that you might not even need to mess around or learn any of those tools. Honestly, the major app building frameworks out there like Remix, Next.js, SvelteKit, and Astro growing a lot in popularity recently. All of those things take care of a lot of the stuff for you. You probably won't even need to think about the things that you used to have to with a Webpack configuration. Again, there are times when you have a very specific customization in mind and you might need to learn a little bit of it. And so having those Webpack chops from back in the day, or if you've gone through any of my tutorials recently, those will help in those situations and you'll still have a better fundamental understanding from learning those things about how this whole ecosystem works, of course, with bundling and everything. So really the bottom line for me is just pick one of those tools that's the least amount of friction and just get going building things. All right, as usual, I'm going to wrap this up saying I hope that this information was helpful to you. And I hope that you'll let me know if there's anything I can do to make these videos even better and even more helpful. Hopefully I'll see you all in the next one.", "title": "Don't learn Webpack in 2023: A dive into 3 alternatives", "url": "https://www.youtube.com/watch?v=RAvdPTkVpCE"}]