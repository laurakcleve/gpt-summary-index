PROMPT:

The following is a transcription of a video for web developers called 'Succeed by coding like a Necromancer'. Write a detailed summary of the video, providing an account of the steps taken and topics covered. Use the first person point of view, using 'I' instead of referring to the speaker as 'the host' or 'the speaker'.

---
TRANSCRIPTION:

Welcome to Swashbuckling with Code. Tonight we shall study the dark arts of necromancy. I often come across developers, whether they're experienced or newer in their careers, referring to their GitHub as a sort of graveyard for dead projects. They might not use GitHub, they might just be local projects or a different repository system, but regardless, the mood is still the same, even if they don't use those exact terms either. It's essentially, I don't finish a lot of projects that I work on, and it fills me with either persistent anxiety or anxiety at varying intervals. I think most of us can relate to this, and it certainly resonated with me when I first heard it from someone else. And it's not just a coding thing, the advice that I'm going to try and impart throughout this video is applicable to other areas of life for sure. That advice, put simply, is to embrace that graveyard, which I call coding like a necromancer. When I say embrace your graveyard of projects, it's not meant as an excuse to just not finish anything, because certainly there's a lot of value in finishing projects. In fact, a lot of the times for my projects, the last 20% of the project is actually like 50% of the work. But it is an excuse to let it go, especially if you're moving on to something else. Bad scientists and necromancers alike classically have many failed experiments before they have a success, and while it may be horrible and unethical when you're experimenting on bodies, it is not when you are experimenting on code. I myself, and I've seen this in others as well, what often sets me back the most in progressing, just in my everyday life, in my career, in the things that I want to do, is the anxiety that's caused by having all these things on my mind that I need to do or that I've never completed yet, and it's like, oh, you know, I should go back and work on this project or I should finish this project, I'd like to be done with it. What ends up happening from that is that I just don't end up doing anything at all some days. I just become overwhelmed from that. Instead, why not turn all those project corpses into fuel? Don't even give a second thought to those failed experiments, except for that you learned something from them. And now you have those discarded parts from those experiments as references for your new projects. What I mean by that, getting out of the analogy, is that you have all this code that you've worked on that's saved up to a repo, hopefully, it could be on your computer, but I hope you store it somewhere else, that you can constantly reference in anything new that you make because you're going to forget that stuff at some point or another. So you're building up this sort of library of mad scribbles that you're creating, whether some of them are successes and whether some of them are failures, it doesn't really matter because you can always continue to reference that code in the future, and that's useful in itself, aside from the fact that you clearly learned something when you were making that. And why I say embrace this graveyard, even though finishing something is very valuable, is starting over is also really valuable. Some of the best code that I've ever written is when I started over once or twice, and a lot of developers would love to be able to start a project over, but they just can't. They have to keep working in a quote-unquote legacy code base. Also, as I've observed at least, you usually have to build something wrong or incorrectly to really understand why the right way is the correct way. You'll constantly encounter tons of idioms and best practices throughout your programming career, and if you just follow those blindly, you won't really know why. And if you're like me, eventually those will pile up to where, you know, I just do this because they told me to, and that's the way it is. And you can only do so much of that before you just really don't know why you do anything, especially when someone questions you about it. So there's a lot of value in just failing, obviously. That's a common saying, and this is just another way of wording that or looking at that, I think. It's really good to create the problem and have the problem and then start over or just move on to something else. Really, my point is summed up that you learn something from that, and you should embrace that. So what coding like a necromancer means to me is treating every graveyard project in your GitHub or wherever you store it as a success. Start embracing that you just did a ton of stuff, that it doesn't matter if you finished it or not. You know, there are certain times where you want to try to push yourself to finish things, but if you're really just not feeling it, don't beat yourself up over it because there's really not much value in that. There's not much value in letting yourself get overwhelmed and just feeling bad about it or just not doing anything that day or letting it eat away at you. Look at it as all the code that you've written that you consistently are doing stuff, and eventually that's going to turn into something, a skill set, a successful project, something that you can be proud of, something that's a success. But honestly, from my perspective, it's all a success. If you're progressing, that's a success. I want to end this video by showing you a real-world, you know, personal project of mine where I've had this very same problem. It's called Parallax Fjord. It's this little project that I did, I think, about a year ago, and it's a real-world example of me never feeling accomplished, even though I should have been proud that I built this thing. Throughout the part of my career that was making websites, I always wanted to work on a parallax site. And a ton of people have done this, so it was always like a spot of sort of an embarrassment for me because I just really like animations, I like creating UI, and I just never got to do this. There was never a project that allowed me to do this. So what I set out to do was to learn how to create a parallax site, and I wanted to first try to use some frameworks or tools because I really didn't have any idea how to do it. I was like, maybe I could figure it out, but let's try to just, you know, use whatever's popular. And what I ended up doing was, as I just happened to be going through Svelte, the docs, there's a part in there where they do a cool little parallax effect, and it kind of clicked for me how easy it is to actually do this. And so, you know, we started with something that I didn't have a good mental model for how parallax really worked at all, and I started trying to use frameworks and tools, you know, as you usually do, but eventually I made my code much simpler, in my opinion, and much more understandable for me, which was the important part because I built a mental model of how to create a parallax effect. And there's varying different ones that you can create, of course. It's just the one that I made. And then I also really wanted to do like a cool sort of SVG scene where it, you know, goes under the ocean. It's not super creative or original, but I've always wanted to create something like that. I've always been inspired by those things. There was quite a bit of work that I had to figure out for, you know, how to actually output the SVGs and how to layer them, especially the clouds that kind of go off the screen and all that. And then to top it all off, I added this like tree animation that was actually really complex to, you know, make all the trees kind of sway in the breeze. I did end up having to use a library for that. And, you know, I figured out that it didn't look very lifelike when I did them all at once. So I made them like staggered. So I had to write this function to go over, you know, each of them and stagger them. And then I did it all in Svelte first, but then I actually was pretty crazy. And I went and I built it in React. And then I built it in Vue because, not that it was the most beautiful code for any of them, but I wanted to just kind of see like size comparisons for something silly like that and, you know, what all work it was. And I was just kind of looking to compare and contrast like a little niche kind of idea and which one I liked best. I was just experimenting with them all. So, you know, after a bunch of work put in of all, you know, I rebuilt this thing, you know, multiple times. To me, that should have felt like a huge success. But there's always something else, right? Like I got into this problem where like now I wanted to demo it a little

(END OF TRANSCRIPTION)

---

SUMMARY 0:

In this video, I discuss the concept of "coding like a necromancer" and how embracing one's graveyard of unfinished projects can lead to personal growth and success. I begin by acknowledging that many developers feel anxiety about not completing projects they've started, which can lead to stagnation and lack of progress.

To combat this anxiety, I suggest embracing the idea of the graveyard and using past projects as fuel for future ones. By learning from past mistakes and using code snippets from old projects, one can build a library of resources to reference for new projects. This allows for a more efficient workflow and can help prevent feeling overwhelmed.

Coding like a necromancer involves treating every unfinished project as a success, learning from failure, and starting over when necessary. This mindset makes it easier to move on from past projects and focus on current ones without feeling burdened by past failures.

I emphasize the importance of starting over and experimenting with different approaches, as this can lead to a deeper understanding of coding concepts and best practices.

To illustrate my point, I share a personal project called Parallax Fjord, which involved creating a parallax scrolling effect using Svelte, React, and Vue. Despite never feeling truly satisfied with the project, I learned valuable lessons from the experience and gained new skills along the way.

In conclusion, coding like a necromancer means embracing the learning process and treating every project, finished or not, as a success. By shifting focus from completion to growth, developers can alleviate anxiety and continue to progress in their careers.